
LAB_3_PP-34_Patrun_Kushchyk_Bukaluik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08006d38  08006d38  00007d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff8  08006ff8  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ff8  08006ff8  00007ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007000  08007000  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007000  08007000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007004  08007004  00008004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007008  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009070  2**0
                  CONTENTS
 10 .bss          00004c00  20000070  20000070  00009070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c70  20004c70  00009070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001843b  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033fd  00000000  00000000  000214db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  000248d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100f  00000000  00000000  00025d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004514  00000000  00000000  00026d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160bb  00000000  00000000  0002b2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d77d0  00000000  00000000  00041366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118b36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fa4  00000000  00000000  00118b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0011eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d20 	.word	0x08006d20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006d20 	.word	0x08006d20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 200);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	23c8      	movs	r3, #200	@ 0xc8
 800056c:	2201      	movs	r2, #1
 800056e:	4804      	ldr	r0, [pc, #16]	@ (8000580 <__io_putchar+0x20>)
 8000570:	f001 ff88 	bl	8002484 <HAL_UART_Transmit>
	return ch;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000008c 	.word	0x2000008c

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fcce 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f832 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8c4 	bl	800071c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000594:	f000 f898 	bl	80006c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f002 fc0a 	bl	8002db0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem */
  myBinarySemHandle = osSemaphoreNew(1, 1, &myBinarySem_attributes);
 800059c:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <main+0x50>)
 800059e:	2101      	movs	r1, #1
 80005a0:	2001      	movs	r0, #1
 80005a2:	f002 fcfc 	bl	8002f9e <osSemaphoreNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <main+0x54>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readFromUART */
  readFromUARTHandle = osThreadNew(StartReadFromUART, NULL, &readFromUART_attributes);
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <main+0x58>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <main+0x5c>)
 80005b2:	f002 fc47 	bl	8002e44 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <main+0x60>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of glowLed */
  glowLedHandle = osThreadNew(StartGlowLed, NULL, &glowLed_attributes);
 80005bc:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <main+0x64>)
 80005be:	2100      	movs	r1, #0
 80005c0:	480a      	ldr	r0, [pc, #40]	@ (80005ec <main+0x68>)
 80005c2:	f002 fc3f 	bl	8002e44 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <main+0x6c>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f002 fc14 	bl	8002df8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x4c>
 80005d4:	08006e9c 	.word	0x08006e9c
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	08006e54 	.word	0x08006e54
 80005e0:	080009b1 	.word	0x080009b1
 80005e4:	200000d4 	.word	0x200000d4
 80005e8:	08006e78 	.word	0x08006e78
 80005ec:	08000a69 	.word	0x08000a69
 80005f0:	200000d8 	.word	0x200000d8

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	@ 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fccc 	bl	8005fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	@ (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	@ 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000664:	2308      	movs	r3, #8
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000668:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800066c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000672:	2304      	movs	r3, #4
 8000674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f000 ff46 	bl	800150c <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000686:	f000 fa55 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2105      	movs	r1, #5
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 f9a7 	bl	80019fc <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b4:	f000 fa3e 	bl	8000b34 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	@ 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART3_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART3_UART_Init+0x4c>)
 8000700:	f001 fe70 	bl	80023e4 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 fa13 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000008c 	.word	0x2000008c
 8000718:	40004800 	.word	0x40004800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b32      	ldr	r3, [pc, #200]	@ (8000800 <MX_GPIO_Init+0xe4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a31      	ldr	r2, [pc, #196]	@ (8000800 <MX_GPIO_Init+0xe4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <MX_GPIO_Init+0xe4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b2b      	ldr	r3, [pc, #172]	@ (8000800 <MX_GPIO_Init+0xe4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a2a      	ldr	r2, [pc, #168]	@ (8000800 <MX_GPIO_Init+0xe4>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <MX_GPIO_Init+0xe4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <MX_GPIO_Init+0xe4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a23      	ldr	r2, [pc, #140]	@ (8000800 <MX_GPIO_Init+0xe4>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_GPIO_Init+0xe4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_GPIO_Init+0xe4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a1c      	ldr	r2, [pc, #112]	@ (8000800 <MX_GPIO_Init+0xe4>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_GPIO_Init+0xe4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <MX_GPIO_Init+0xe8>)
 80007aa:	f000 fe7d 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007b2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4811      	ldr	r0, [pc, #68]	@ (8000808 <MX_GPIO_Init+0xec>)
 80007c4:	f000 fcd4 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80007c8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4808      	ldr	r0, [pc, #32]	@ (8000804 <MX_GPIO_Init+0xe8>)
 80007e2:	f000 fcc5 	bl	8001170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	2006      	movs	r0, #6
 80007ec:	f000 fc96 	bl	800111c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007f0:	2006      	movs	r0, #6
 80007f2:	f000 fcaf 	bl	8001154 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	@ 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020c00 	.word	0x40020c00
 8000808:	40020000 	.word	0x40020000

0800080c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
	currentClick = HAL_GetTick();
 8000816:	f000 fbbd 	bl	8000f94 <HAL_GetTick>
 800081a:	4603      	mov	r3, r0
 800081c:	4a17      	ldr	r2, [pc, #92]	@ (800087c <HAL_GPIO_EXTI_Callback+0x70>)
 800081e:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_0 && (currentClick - prevClick > 10))
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d125      	bne.n	8000872 <HAL_GPIO_EXTI_Callback+0x66>
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <HAL_GPIO_EXTI_Callback+0x70>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <HAL_GPIO_EXTI_Callback+0x74>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	2b0a      	cmp	r3, #10
 8000832:	d91e      	bls.n	8000872 <HAL_GPIO_EXTI_Callback+0x66>
	{
		activeLeds = 0;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x78>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000840:	4811      	ldr	r0, [pc, #68]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000842:	f000 fe31 	bl	80014a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800084c:	480e      	ldr	r0, [pc, #56]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x7c>)
 800084e:	f000 fe2b 	bl	80014a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000858:	480b      	ldr	r0, [pc, #44]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x7c>)
 800085a:	f000 fe25 	bl	80014a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000864:	4808      	ldr	r0, [pc, #32]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000866:	f000 fe1f 	bl	80014a8 <HAL_GPIO_WritePin>

		prevClick = currentClick;
 800086a:	4b04      	ldr	r3, [pc, #16]	@ (800087c <HAL_GPIO_EXTI_Callback+0x70>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <HAL_GPIO_EXTI_Callback+0x74>)
 8000870:	6013      	str	r3, [r2, #0]
	}
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000e4 	.word	0x200000e4
 8000880:	200000e8 	.word	0x200000e8
 8000884:	200000e0 	.word	0x200000e0
 8000888:	40020c00 	.word	0x40020c00

0800088c <PrintFrequencyInfo>:

void PrintFrequencyInfo() {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    printf("Frequency set to %ld ms\n\r", blinkInterval); // Відповідь через UART
 8000890:	4b03      	ldr	r3, [pc, #12]	@ (80008a0 <PrintFrequencyInfo+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <PrintFrequencyInfo+0x18>)
 8000898:	f005 fb00 	bl	8005e9c <iprintf>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000000 	.word	0x20000000
 80008a4:	08006d5c 	.word	0x08006d5c

080008a8 <PrintLedInfo>:

void PrintLedInfo() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    printf("LED %d turned ON\n\r", activeLeds);
 80008ac:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <PrintLedInfo+0x18>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <PrintLedInfo+0x1c>)
 80008b6:	f005 faf1 	bl	8005e9c <iprintf>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000e0 	.word	0x200000e0
 80008c4:	08006d78 	.word	0x08006d78

080008c8 <PrintErrorInfo>:

void PrintErrorInfo(const char *message) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    printf("Error: %s\n\r", message);
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <PrintErrorInfo+0x18>)
 80008d4:	f005 fae2 	bl	8005e9c <iprintf>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08006d8c 	.word	0x08006d8c

080008e4 <ParseCommand>:

void ParseCommand(const char *input) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    if (strncmp(input, "SET FREQ ", 9) == 0) {
 80008ec:	2209      	movs	r2, #9
 80008ee:	4928      	ldr	r1, [pc, #160]	@ (8000990 <ParseCommand+0xac>)
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f005 fb43 	bl	8005f7c <strncmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d116      	bne.n	800092a <ParseCommand+0x46>
        // Обробка команди "SET FREQ X"
        int freq = atoi(&input[9]); // Перетворення числа після "SET FREQ "
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3309      	adds	r3, #9
 8000900:	4618      	mov	r0, r3
 8000902:	f005 f981 	bl	8005c08 <atoi>
 8000906:	60b8      	str	r0, [r7, #8]
        if (freq >= 100 && freq <= 2000) {
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	2b63      	cmp	r3, #99	@ 0x63
 800090c:	dd09      	ble.n	8000922 <ParseCommand+0x3e>
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000914:	dc05      	bgt.n	8000922 <ParseCommand+0x3e>
            blinkInterval = (uint32_t)freq;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <ParseCommand+0xb0>)
 800091a:	6013      	str	r3, [r2, #0]
            PrintFrequencyInfo();
 800091c:	f7ff ffb6 	bl	800088c <PrintFrequencyInfo>
 8000920:	e029      	b.n	8000976 <ParseCommand+0x92>
            //printf("Frequency set to %d ms\n", freq); // Відповідь через UART
        } else {
            PrintErrorInfo("Frequency out of range (100-2000 ms)");
 8000922:	481d      	ldr	r0, [pc, #116]	@ (8000998 <ParseCommand+0xb4>)
 8000924:	f7ff ffd0 	bl	80008c8 <PrintErrorInfo>
 8000928:	e025      	b.n	8000976 <ParseCommand+0x92>
            //printf("Error: Frequency out of range (100-2000 ms)\n");
        }
    } else if (strncmp(input, "SET ON ", 7) == 0) {
 800092a:	2207      	movs	r2, #7
 800092c:	491b      	ldr	r1, [pc, #108]	@ (800099c <ParseCommand+0xb8>)
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f005 fb24 	bl	8005f7c <strncmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d11a      	bne.n	8000970 <ParseCommand+0x8c>
        // Обробка команди "SET ON X"
        int ledNumber = atoi(&input[7]); // Перетворення числа після "SET ON "
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3307      	adds	r3, #7
 800093e:	4618      	mov	r0, r3
 8000940:	f005 f962 	bl	8005c08 <atoi>
 8000944:	60f8      	str	r0, [r7, #12]
        if (ledNumber >= 1 && ledNumber <= 2) {
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	dd0d      	ble.n	8000968 <ParseCommand+0x84>
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b02      	cmp	r3, #2
 8000950:	dc0a      	bgt.n	8000968 <ParseCommand+0x84>
            activeLeds = (1 << (ledNumber - 1));
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3b01      	subs	r3, #1
 8000956:	2201      	movs	r2, #1
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <ParseCommand+0xbc>)
 8000960:	701a      	strb	r2, [r3, #0]
            PrintLedInfo();
 8000962:	f7ff ffa1 	bl	80008a8 <PrintLedInfo>
 8000966:	e006      	b.n	8000976 <ParseCommand+0x92>
           // printf("LED %d turned ON\n", ledNumber);
        } else {
            PrintErrorInfo("LED number out of range (1-2)");
 8000968:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <ParseCommand+0xc0>)
 800096a:	f7ff ffad 	bl	80008c8 <PrintErrorInfo>
 800096e:	e002      	b.n	8000976 <ParseCommand+0x92>
            //printf("Error: LED number out of range (1-2)\n");
        }
    } else {
        PrintErrorInfo("Unknown command");
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <ParseCommand+0xc4>)
 8000972:	f7ff ffa9 	bl	80008c8 <PrintErrorInfo>
        //printf("Error: Unknown command '%s'\n", input);
    }

    printf("Result: frequency=%ld LED=%d\n\r", blinkInterval, activeLeds);
 8000976:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <ParseCommand+0xb0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a09      	ldr	r2, [pc, #36]	@ (80009a0 <ParseCommand+0xbc>)
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	4619      	mov	r1, r3
 8000982:	480a      	ldr	r0, [pc, #40]	@ (80009ac <ParseCommand+0xc8>)
 8000984:	f005 fa8a 	bl	8005e9c <iprintf>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	08006d98 	.word	0x08006d98
 8000994:	20000000 	.word	0x20000000
 8000998:	08006da4 	.word	0x08006da4
 800099c:	08006dcc 	.word	0x08006dcc
 80009a0:	200000e0 	.word	0x200000e0
 80009a4:	08006dd4 	.word	0x08006dd4
 80009a8:	08006df4 	.word	0x08006df4
 80009ac:	08006e04 	.word	0x08006e04

080009b0 <StartReadFromUART>:
  * @brief  Function implementing the readFromUART thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadFromUART */
void StartReadFromUART(void *argument) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09e      	sub	sp, #120	@ 0x78
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t buffer[100];  // Буфер для збереження рядка
	uint8_t chr;          // Тимчасовий байт
	uint8_t index = 0;    // Індекс для запису в буфер
 80009b8:	2300      	movs	r3, #0
 80009ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	HAL_StatusTypeDef status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	/* Infinite loop */
	for (;;)
	{
		status = HAL_UART_Receive(&huart3, &chr, 1, 100);
 80009c4:	f107 010f 	add.w	r1, r7, #15
 80009c8:	2364      	movs	r3, #100	@ 0x64
 80009ca:	2201      	movs	r2, #1
 80009cc:	4824      	ldr	r0, [pc, #144]	@ (8000a60 <StartReadFromUART+0xb0>)
 80009ce:	f001 fde4 	bl	800259a <HAL_UART_Receive>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
		if (status == HAL_OK)
 80009d8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d13b      	bne.n	8000a58 <StartReadFromUART+0xa8>
		{
			HAL_UART_Transmit(&huart3, &chr, 1, 100); // Відправляємо символ назад (echo)
 80009e0:	f107 010f 	add.w	r1, r7, #15
 80009e4:	2364      	movs	r3, #100	@ 0x64
 80009e6:	2201      	movs	r2, #1
 80009e8:	481d      	ldr	r0, [pc, #116]	@ (8000a60 <StartReadFromUART+0xb0>)
 80009ea:	f001 fd4b 	bl	8002484 <HAL_UART_Transmit>

			if (chr == '\r')  // Символ завершення команди (Enter)
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b0d      	cmp	r3, #13
 80009f2:	d116      	bne.n	8000a22 <StartReadFromUART+0x72>
			{
				buffer[index] = '\0';  // Завершуємо рядок
 80009f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80009f8:	3378      	adds	r3, #120	@ 0x78
 80009fa:	443b      	add	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	f803 2c68 	strb.w	r2, [r3, #-104]
				// Обробка отриманої команди
				ParseCommand((char*) buffer);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff6c 	bl	80008e4 <ParseCommand>
				memset(buffer, 0, sizeof(buffer));
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	2264      	movs	r2, #100	@ 0x64
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f005 fac3 	bl	8005fa0 <memset>
				index = 0;  // Очищення індексу для наступного рядка
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8000a20:	e01a      	b.n	8000a58 <StartReadFromUART+0xa8>
			}
			else
			{
				buffer[index++] = chr;  // Додаємо символ у буфер
 8000a22:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	f887 2077 	strb.w	r2, [r7, #119]	@ 0x77
 8000a2c:	7bfa      	ldrb	r2, [r7, #15]
 8000a2e:	3378      	adds	r3, #120	@ 0x78
 8000a30:	443b      	add	r3, r7
 8000a32:	f803 2c68 	strb.w	r2, [r3, #-104]
				if (index >= sizeof(buffer))  // Запобігаємо переповненню
 8000a36:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a3a:	2b63      	cmp	r3, #99	@ 0x63
 8000a3c:	d90c      	bls.n	8000a58 <StartReadFromUART+0xa8>
				{
					index = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
					memset(buffer, 0, sizeof(buffer));
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2264      	movs	r2, #100	@ 0x64
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 faa7 	bl	8005fa0 <memset>
					printf("Error: Buffer overflow\n");
 8000a52:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <StartReadFromUART+0xb4>)
 8000a54:	f005 fa8a 	bl	8005f6c <puts>
				}
			}

		}
		osDelay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f002 fa85 	bl	8002f68 <osDelay>
		status = HAL_UART_Receive(&huart3, &chr, 1, 100);
 8000a5e:	e7b1      	b.n	80009c4 <StartReadFromUART+0x14>
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	08006e24 	.word	0x08006e24

08000a68 <StartGlowLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGlowLed */
void StartGlowLed(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGlowLed */
  /* Infinite loop */
	for (;;) {
	        if (activeLeds == 1) {
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <StartGlowLed+0x9c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d10c      	bne.n	8000a94 <StartGlowLed+0x2c>
	            // Увімкнути тільки перший світлодіод
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Світлодіод 1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a80:	4821      	ldr	r0, [pc, #132]	@ (8000b08 <StartGlowLed+0xa0>)
 8000a82:	f000 fd11 	bl	80014a8 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // Світлодіод 2
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <StartGlowLed+0xa0>)
 8000a8e:	f000 fd0b 	bl	80014a8 <HAL_GPIO_WritePin>
 8000a92:	e01d      	b.n	8000ad0 <StartGlowLed+0x68>
	        } else if (activeLeds == 2) {
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <StartGlowLed+0x9c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d10c      	bne.n	8000ab8 <StartGlowLed+0x50>
	            // Увімкнути перший та другий світлодіоди
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Світлодіод 1
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa4:	4818      	ldr	r0, [pc, #96]	@ (8000b08 <StartGlowLed+0xa0>)
 8000aa6:	f000 fcff 	bl	80014a8 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Світлодіод 2
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab0:	4815      	ldr	r0, [pc, #84]	@ (8000b08 <StartGlowLed+0xa0>)
 8000ab2:	f000 fcf9 	bl	80014a8 <HAL_GPIO_WritePin>
 8000ab6:	e00b      	b.n	8000ad0 <StartGlowLed+0x68>
	        } else {
	            // Вимкнути всі світлодіоди
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // Світлодіод 1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000abe:	4812      	ldr	r0, [pc, #72]	@ (8000b08 <StartGlowLed+0xa0>)
 8000ac0:	f000 fcf2 	bl	80014a8 <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // Світлодіод 2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aca:	480f      	ldr	r0, [pc, #60]	@ (8000b08 <StartGlowLed+0xa0>)
 8000acc:	f000 fcec 	bl	80014a8 <HAL_GPIO_WritePin>
	        }

	        osDelay(blinkInterval / 2); // Зачекати половину інтервалу
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <StartGlowLed+0xa4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fa46 	bl	8002f68 <osDelay>

	        // Вимкнути світлодіоди для створення миготіння
	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); // Світлодіод 1
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ae2:	4809      	ldr	r0, [pc, #36]	@ (8000b08 <StartGlowLed+0xa0>)
 8000ae4:	f000 fce0 	bl	80014a8 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // Світлодіод 2
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aee:	4806      	ldr	r0, [pc, #24]	@ (8000b08 <StartGlowLed+0xa0>)
 8000af0:	f000 fcda 	bl	80014a8 <HAL_GPIO_WritePin>

	        osDelay(blinkInterval / 2); // Зачекати другу половину інтервалу
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <StartGlowLed+0xa4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	085b      	lsrs	r3, r3, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fa34 	bl	8002f68 <osDelay>
	        if (activeLeds == 1) {
 8000b00:	e7b6      	b.n	8000a70 <StartGlowLed+0x8>
 8000b02:	bf00      	nop
 8000b04:	200000e0 	.word	0x200000e0
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	20000000 	.word	0x20000000

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b22:	f000 fa23 	bl	8000f6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40010000 	.word	0x40010000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a11      	ldr	r2, [pc, #68]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b56:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_MspInit+0x54>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	f06f 0001 	mvn.w	r0, #1
 8000b86:	f000 fac9 	bl	800111c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	@ (8000c1c <HAL_UART_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12c      	bne.n	8000c14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a10      	ldr	r2, [pc, #64]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_UART_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c04:	2307      	movs	r3, #7
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <HAL_UART_MspInit+0x8c>)
 8000c10:	f000 faae 	bl	8001170 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	@ 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004800 	.word	0x40004800
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	@ 0x30
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cfc <HAL_InitTick+0xd4>)
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c40:	4a2e      	ldr	r2, [pc, #184]	@ (8000cfc <HAL_InitTick+0xd4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c48:	4b2c      	ldr	r3, [pc, #176]	@ (8000cfc <HAL_InitTick+0xd4>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c54:	f107 020c 	add.w	r2, r7, #12
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 f8ec 	bl	8001e3c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c64:	f001 f8d6 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c70:	4a23      	ldr	r2, [pc, #140]	@ (8000d00 <HAL_InitTick+0xd8>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9b      	lsrs	r3, r3, #18
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c7c:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000c7e:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <HAL_InitTick+0xe0>)
 8000c80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000c84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ca2:	4818      	ldr	r0, [pc, #96]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000ca4:	f001 f8fc 	bl	8001ea0 <HAL_TIM_Base_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000cae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d11b      	bne.n	8000cee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cb6:	4813      	ldr	r0, [pc, #76]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000cb8:	f001 f94c 	bl	8001f54 <HAL_TIM_Base_Start_IT>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d111      	bne.n	8000cee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cca:	2019      	movs	r0, #25
 8000ccc:	f000 fa42 	bl	8001154 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b0f      	cmp	r3, #15
 8000cd4:	d808      	bhi.n	8000ce8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	2019      	movs	r0, #25
 8000cdc:	f000 fa1e 	bl	800111c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <HAL_InitTick+0xe4>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e002      	b.n	8000cee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3730      	adds	r7, #48	@ 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	431bde83 	.word	0x431bde83
 8000d04:	200000ec 	.word	0x200000ec
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	20000008 	.word	0x20000008

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f000 fbc6 	bl	80014dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d5a:	f001 f96b 	bl	8002034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000ec 	.word	0x200000ec

08000d68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e00a      	b.n	8000d90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d7a:	f3af 8000 	nop.w
 8000d7e:	4601      	mov	r1, r0
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	b2ca      	uxtb	r2, r1
 8000d88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbf0      	blt.n	8000d7a <_read+0x12>
  }

  return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e009      	b.n	8000dc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	60ba      	str	r2, [r7, #8]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fbcf 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dbf1      	blt.n	8000db4 <_write+0x12>
  }
  return len;
 8000dd0:	687b      	ldr	r3, [r7, #4]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_close>:

int _close(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e02:	605a      	str	r2, [r3, #4]
  return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_isatty>:

int _isatty(int file)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f005 f8f2 	bl	800605c <__errno>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <_sbrk+0x64>)
 8000e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20020000 	.word	0x20020000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	20000134 	.word	0x20000134
 8000eac:	20004c70 	.word	0x20004c70

08000eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ed8:	f7ff ffea 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	@ (8000f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f005 f8b1 	bl	8006068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fb3d 	bl	8000584 <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f18:	08007008 	.word	0x08007008
  ldr r2, =_sbss
 8000f1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f20:	20004c70 	.word	0x20004c70

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	@ (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f8d8 	bl	8001106 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	200f      	movs	r0, #15
 8000f58:	f7ff fe66 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fdf0 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	20000138 	.word	0x20000138

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	@ (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000138 	.word	0x20000138

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff4c 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112e:	f7ff ff61 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	6978      	ldr	r0, [r7, #20]
 800113a:	f7ff ffb1 	bl	80010a0 <NVIC_EncodePriority>
 800113e:	4602      	mov	r2, r0
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff80 	bl	800104c <__NVIC_SetPriority>
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff54 	bl	8001010 <__NVIC_EnableIRQ>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e16b      	b.n	8001464 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 815a 	bne.w	800145e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d130      	bne.n	8001224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	69b9      	ldr	r1, [r7, #24]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80b4 	beq.w	800145e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b60      	ldr	r3, [pc, #384]	@ (800147c <HAL_GPIO_Init+0x30c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a5f      	ldr	r2, [pc, #380]	@ (800147c <HAL_GPIO_Init+0x30c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b5d      	ldr	r3, [pc, #372]	@ (800147c <HAL_GPIO_Init+0x30c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001312:	4a5b      	ldr	r2, [pc, #364]	@ (8001480 <HAL_GPIO_Init+0x310>)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a52      	ldr	r2, [pc, #328]	@ (8001484 <HAL_GPIO_Init+0x314>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d02b      	beq.n	8001396 <HAL_GPIO_Init+0x226>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a51      	ldr	r2, [pc, #324]	@ (8001488 <HAL_GPIO_Init+0x318>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d025      	beq.n	8001392 <HAL_GPIO_Init+0x222>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a50      	ldr	r2, [pc, #320]	@ (800148c <HAL_GPIO_Init+0x31c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01f      	beq.n	800138e <HAL_GPIO_Init+0x21e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4f      	ldr	r2, [pc, #316]	@ (8001490 <HAL_GPIO_Init+0x320>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0x21a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4e      	ldr	r2, [pc, #312]	@ (8001494 <HAL_GPIO_Init+0x324>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x216>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4d      	ldr	r2, [pc, #308]	@ (8001498 <HAL_GPIO_Init+0x328>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x212>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4c      	ldr	r2, [pc, #304]	@ (800149c <HAL_GPIO_Init+0x32c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x20e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	@ (80014a0 <HAL_GPIO_Init+0x330>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x20a>
 8001376:	2307      	movs	r3, #7
 8001378:	e00e      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800137a:	2308      	movs	r3, #8
 800137c:	e00c      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800137e:	2306      	movs	r3, #6
 8001380:	e00a      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001382:	2305      	movs	r3, #5
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001386:	2304      	movs	r3, #4
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	@ (8001480 <HAL_GPIO_Init+0x310>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a32      	ldr	r2, [pc, #200]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a27      	ldr	r2, [pc, #156]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001458:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <HAL_GPIO_Init+0x334>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f ae90 	bls.w	800118c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40021400 	.word	0x40021400
 800149c:	40021800 	.word	0x40021800
 80014a0:	40021c00 	.word	0x40021c00
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014f2:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f986 	bl	800080c <HAL_GPIO_EXTI_Callback>
  }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e267      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d075      	beq.n	8001616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800152a:	4b88      	ldr	r3, [pc, #544]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b04      	cmp	r3, #4
 8001534:	d00c      	beq.n	8001550 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001536:	4b85      	ldr	r3, [pc, #532]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800153e:	2b08      	cmp	r3, #8
 8001540:	d112      	bne.n	8001568 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4b82      	ldr	r3, [pc, #520]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800154a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800154e:	d10b      	bne.n	8001568 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	4b7e      	ldr	r3, [pc, #504]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d05b      	beq.n	8001614 <HAL_RCC_OscConfig+0x108>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d157      	bne.n	8001614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e242      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001570:	d106      	bne.n	8001580 <HAL_RCC_OscConfig+0x74>
 8001572:	4b76      	ldr	r3, [pc, #472]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a75      	ldr	r2, [pc, #468]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e01d      	b.n	80015bc <HAL_RCC_OscConfig+0xb0>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x98>
 800158a:	4b70      	ldr	r3, [pc, #448]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6f      	ldr	r2, [pc, #444]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b6d      	ldr	r3, [pc, #436]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6c      	ldr	r2, [pc, #432]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0xb0>
 80015a4:	4b69      	ldr	r3, [pc, #420]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a68      	ldr	r2, [pc, #416]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b66      	ldr	r3, [pc, #408]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a65      	ldr	r2, [pc, #404]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fce6 	bl	8000f94 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fce2 	bl	8000f94 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	@ 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e207      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	4b5b      	ldr	r3, [pc, #364]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0xc0>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fcd2 	bl	8000f94 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fcce 	bl	8000f94 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	@ 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1f3      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	4b51      	ldr	r3, [pc, #324]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0xe8>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d063      	beq.n	80016ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162e:	4b47      	ldr	r3, [pc, #284]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001636:	2b08      	cmp	r3, #8
 8001638:	d11c      	bne.n	8001674 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b44      	ldr	r3, [pc, #272]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d116      	bne.n	8001674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x152>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e1c7      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4937      	ldr	r1, [pc, #220]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	e03a      	b.n	80016ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167c:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <HAL_RCC_OscConfig+0x244>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff fc87 	bl	8000f94 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fc83 	bl	8000f94 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1a8      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b28      	ldr	r3, [pc, #160]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4925      	ldr	r1, [pc, #148]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
 80016bc:	e015      	b.n	80016ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <HAL_RCC_OscConfig+0x244>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc66 	bl	8000f94 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc62 	bl	8000f94 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e187      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d036      	beq.n	8001764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d016      	beq.n	800172c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_RCC_OscConfig+0x248>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fc46 	bl	8000f94 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fc42 	bl	8000f94 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e167      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_RCC_OscConfig+0x240>)
 8001720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x200>
 800172a:	e01b      	b.n	8001764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_RCC_OscConfig+0x248>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7ff fc2f 	bl	8000f94 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	e00e      	b.n	8001758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff fc2b 	bl	8000f94 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d907      	bls.n	8001758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e150      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
 800174c:	40023800 	.word	0x40023800
 8001750:	42470000 	.word	0x42470000
 8001754:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	4b88      	ldr	r3, [pc, #544]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 800175a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ea      	bne.n	800173a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 8097 	beq.w	80018a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b81      	ldr	r3, [pc, #516]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b7d      	ldr	r3, [pc, #500]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a7c      	ldr	r2, [pc, #496]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b7a      	ldr	r3, [pc, #488]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b77      	ldr	r3, [pc, #476]	@ (8001980 <HAL_RCC_OscConfig+0x474>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d118      	bne.n	80017e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ae:	4b74      	ldr	r3, [pc, #464]	@ (8001980 <HAL_RCC_OscConfig+0x474>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a73      	ldr	r2, [pc, #460]	@ (8001980 <HAL_RCC_OscConfig+0x474>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fbeb 	bl	8000f94 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c2:	f7ff fbe7 	bl	8000f94 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e10c      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <HAL_RCC_OscConfig+0x474>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2ea>
 80017e8:	4b64      	ldr	r3, [pc, #400]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ec:	4a63      	ldr	r2, [pc, #396]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f4:	e01c      	b.n	8001830 <HAL_RCC_OscConfig+0x324>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x30c>
 80017fe:	4b5f      	ldr	r3, [pc, #380]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001802:	4a5e      	ldr	r2, [pc, #376]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6713      	str	r3, [r2, #112]	@ 0x70
 800180a:	4b5c      	ldr	r3, [pc, #368]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180e:	4a5b      	ldr	r2, [pc, #364]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	@ 0x70
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0x324>
 8001818:	4b58      	ldr	r3, [pc, #352]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	4a57      	ldr	r2, [pc, #348]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
 8001824:	4b55      	ldr	r3, [pc, #340]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001828:	4a54      	ldr	r2, [pc, #336]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 800182a:	f023 0304 	bic.w	r3, r3, #4
 800182e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d015      	beq.n	8001864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff fbac 	bl	8000f94 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	e00a      	b.n	8001856 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7ff fba8 	bl	8000f94 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0cb      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	4b49      	ldr	r3, [pc, #292]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0ee      	beq.n	8001840 <HAL_RCC_OscConfig+0x334>
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7ff fb96 	bl	8000f94 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff fb92 	bl	8000f94 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0b5      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001882:	4b3e      	ldr	r3, [pc, #248]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1ee      	bne.n	800186c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001894:	4b39      	ldr	r3, [pc, #228]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	4a38      	ldr	r2, [pc, #224]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 800189a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800189e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a1 	beq.w	80019ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018aa:	4b34      	ldr	r3, [pc, #208]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d05c      	beq.n	8001970 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d141      	bne.n	8001942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b31      	ldr	r3, [pc, #196]	@ (8001984 <HAL_RCC_OscConfig+0x478>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb66 	bl	8000f94 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff fb62 	bl	8000f94 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e087      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	4b27      	ldr	r3, [pc, #156]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	491b      	ldr	r1, [pc, #108]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <HAL_RCC_OscConfig+0x478>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fb3b 	bl	8000f94 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fb37 	bl	8000f94 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e05c      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x416>
 8001940:	e054      	b.n	80019ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_RCC_OscConfig+0x478>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fb24 	bl	8000f94 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff fb20 	bl	8000f94 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e045      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_RCC_OscConfig+0x470>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x444>
 800196e:	e03d      	b.n	80019ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d107      	bne.n	8001988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e038      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000
 8001984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001988:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_RCC_OscConfig+0x4ec>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d028      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d121      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d11a      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019b8:	4013      	ands	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d111      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	3b01      	subs	r3, #1
 80019d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0cc      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b68      	ldr	r3, [pc, #416]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d90c      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b65      	ldr	r3, [pc, #404]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b63      	ldr	r3, [pc, #396]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b8      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	4b59      	ldr	r3, [pc, #356]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a58      	ldr	r2, [pc, #352]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a68:	4b53      	ldr	r3, [pc, #332]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	494d      	ldr	r1, [pc, #308]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d044      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d119      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e07f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e06f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e067      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ada:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f023 0203 	bic.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4934      	ldr	r1, [pc, #208]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aec:	f7ff fa52 	bl	8000f94 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7ff fa4e 	bl	8000f94 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e04f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 020c 	and.w	r2, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1eb      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d20c      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e032      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4916      	ldr	r1, [pc, #88]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	490e      	ldr	r1, [pc, #56]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b82:	f000 f821 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f840 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	08006eac 	.word	0x08006eac
 8001bc0:	20000004 	.word	0x20000004
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b094      	sub	sp, #80	@ 0x50
 8001bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be0:	4b79      	ldr	r3, [pc, #484]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d00d      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x40>
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	f200 80e1 	bhi.w	8001db4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x34>
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bfa:	e0db      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b73      	ldr	r3, [pc, #460]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c00:	e0db      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c02:	4b73      	ldr	r3, [pc, #460]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c06:	e0d8      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c08:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c12:	4b6d      	ldr	r3, [pc, #436]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d063      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	099b      	lsrs	r3, r3, #6
 8001c24:	2200      	movs	r2, #0
 8001c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	f04f 0000 	mov.w	r0, #0
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	0159      	lsls	r1, r3, #5
 8001c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4c:	0150      	lsls	r0, r2, #5
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4621      	mov	r1, r4
 8001c54:	1a51      	subs	r1, r2, r1
 8001c56:	6139      	str	r1, [r7, #16]
 8001c58:	4629      	mov	r1, r5
 8001c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c6c:	4659      	mov	r1, fp
 8001c6e:	018b      	lsls	r3, r1, #6
 8001c70:	4651      	mov	r1, sl
 8001c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c76:	4651      	mov	r1, sl
 8001c78:	018a      	lsls	r2, r1, #6
 8001c7a:	4651      	mov	r1, sl
 8001c7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c80:	4659      	mov	r1, fp
 8001c82:	eb63 0901 	sbc.w	r9, r3, r1
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c9a:	4690      	mov	r8, r2
 8001c9c:	4699      	mov	r9, r3
 8001c9e:	4623      	mov	r3, r4
 8001ca0:	eb18 0303 	adds.w	r3, r8, r3
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	462b      	mov	r3, r5
 8001ca8:	eb49 0303 	adc.w	r3, r9, r3
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cba:	4629      	mov	r1, r5
 8001cbc:	024b      	lsls	r3, r1, #9
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	024a      	lsls	r2, r1, #9
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cce:	2200      	movs	r2, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cd8:	f7fe faca 	bl	8000270 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ce4:	e058      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	4b38      	ldr	r3, [pc, #224]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	099b      	lsrs	r3, r3, #6
 8001cec:	2200      	movs	r2, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d00:	4642      	mov	r2, r8
 8001d02:	464b      	mov	r3, r9
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	0159      	lsls	r1, r3, #5
 8001d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d12:	0150      	lsls	r0, r2, #5
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4641      	mov	r1, r8
 8001d1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d1e:	4649      	mov	r1, r9
 8001d20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d38:	ebb2 040a 	subs.w	r4, r2, sl
 8001d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	00eb      	lsls	r3, r5, #3
 8001d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d4e:	00e2      	lsls	r2, r4, #3
 8001d50:	4614      	mov	r4, r2
 8001d52:	461d      	mov	r5, r3
 8001d54:	4643      	mov	r3, r8
 8001d56:	18e3      	adds	r3, r4, r3
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	eb45 0303 	adc.w	r3, r5, r3
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d6e:	4629      	mov	r1, r5
 8001d70:	028b      	lsls	r3, r1, #10
 8001d72:	4621      	mov	r1, r4
 8001d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d78:	4621      	mov	r1, r4
 8001d7a:	028a      	lsls	r2, r1, #10
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d82:	2200      	movs	r2, #0
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	61fa      	str	r2, [r7, #28]
 8001d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d8c:	f7fe fa70 	bl	8000270 <__aeabi_uldivmod>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4613      	mov	r3, r2
 8001d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	0c1b      	lsrs	r3, r3, #16
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	3301      	adds	r3, #1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001da8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001db2:	e002      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001db6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3750      	adds	r7, #80	@ 0x50
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	007a1200 	.word	0x007a1200

08001dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df0:	f7ff fff0 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0a9b      	lsrs	r3, r3, #10
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	@ (8001e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	08006ebc 	.word	0x08006ebc

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e18:	f7ff ffdc 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	0b5b      	lsrs	r3, r3, #13
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4903      	ldr	r1, [pc, #12]	@ (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	08006ebc 	.word	0x08006ebc

08001e3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	220f      	movs	r2, #15
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <HAL_RCC_GetClockConfig+0x5c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <HAL_RCC_GetClockConfig+0x5c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e7e:	4b07      	ldr	r3, [pc, #28]	@ (8001e9c <HAL_RCC_GetClockConfig+0x60>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0207 	and.w	r2, r3, #7
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e041      	b.n	8001f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f839 	bl	8001f3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 f9c0 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d001      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e04e      	b.n	800200a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a23      	ldr	r2, [pc, #140]	@ (8002018 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d022      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f96:	d01d      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800201c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d018      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8002020 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002024 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00e      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1b      	ldr	r2, [pc, #108]	@ (8002028 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	@ (800202c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d004      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x80>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a18      	ldr	r2, [pc, #96]	@ (8002030 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d111      	bne.n	8001ff8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d010      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff6:	e007      	b.n	8002008 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40010000 	.word	0x40010000
 800201c:	40000400 	.word	0x40000400
 8002020:	40000800 	.word	0x40000800
 8002024:	40000c00 	.word	0x40000c00
 8002028:	40010400 	.word	0x40010400
 800202c:	40014000 	.word	0x40014000
 8002030:	40001800 	.word	0x40001800

08002034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d020      	beq.n	8002098 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01b      	beq.n	8002098 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0202 	mvn.w	r2, #2
 8002068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8d2 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8c4 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8d5 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d020      	beq.n	80020e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0204 	mvn.w	r2, #4
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8ac 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f89e 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8af 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d020      	beq.n	8002130 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01b      	beq.n	8002130 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0208 	mvn.w	r2, #8
 8002100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2204      	movs	r2, #4
 8002106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f886 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f878 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f889 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d020      	beq.n	800217c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0210 	mvn.w	r2, #16
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2208      	movs	r2, #8
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f860 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f852 	bl	8002214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f863 	bl	800223c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0201 	mvn.w	r2, #1
 8002198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fcb8 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00c      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f906 	bl	80023d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f834 	bl	8002250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00c      	beq.n	800220c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0220 	mvn.w	r2, #32
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8d8 	bl	80023bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a46      	ldr	r2, [pc, #280]	@ (8002390 <TIM_Base_SetConfig+0x12c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002282:	d00f      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a43      	ldr	r2, [pc, #268]	@ (8002394 <TIM_Base_SetConfig+0x130>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00b      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a42      	ldr	r2, [pc, #264]	@ (8002398 <TIM_Base_SetConfig+0x134>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d007      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a41      	ldr	r2, [pc, #260]	@ (800239c <TIM_Base_SetConfig+0x138>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a40      	ldr	r2, [pc, #256]	@ (80023a0 <TIM_Base_SetConfig+0x13c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d108      	bne.n	80022b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a35      	ldr	r2, [pc, #212]	@ (8002390 <TIM_Base_SetConfig+0x12c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d02b      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c4:	d027      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a32      	ldr	r2, [pc, #200]	@ (8002394 <TIM_Base_SetConfig+0x130>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d023      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a31      	ldr	r2, [pc, #196]	@ (8002398 <TIM_Base_SetConfig+0x134>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01f      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a30      	ldr	r2, [pc, #192]	@ (800239c <TIM_Base_SetConfig+0x138>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01b      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2f      	ldr	r2, [pc, #188]	@ (80023a0 <TIM_Base_SetConfig+0x13c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d017      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2e      	ldr	r2, [pc, #184]	@ (80023a4 <TIM_Base_SetConfig+0x140>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2d      	ldr	r2, [pc, #180]	@ (80023a8 <TIM_Base_SetConfig+0x144>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00f      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2c      	ldr	r2, [pc, #176]	@ (80023ac <TIM_Base_SetConfig+0x148>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00b      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a2b      	ldr	r2, [pc, #172]	@ (80023b0 <TIM_Base_SetConfig+0x14c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a2a      	ldr	r2, [pc, #168]	@ (80023b4 <TIM_Base_SetConfig+0x150>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a29      	ldr	r2, [pc, #164]	@ (80023b8 <TIM_Base_SetConfig+0x154>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800231c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <TIM_Base_SetConfig+0x12c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0xf8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <TIM_Base_SetConfig+0x13c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d103      	bne.n	8002364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f023 0201 	bic.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]
  }
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40010400 	.word	0x40010400
 80023a4:	40014000 	.word	0x40014000
 80023a8:	40014400 	.word	0x40014400
 80023ac:	40014800 	.word	0x40014800
 80023b0:	40001800 	.word	0x40001800
 80023b4:	40001c00 	.word	0x40001c00
 80023b8:	40002000 	.word	0x40002000

080023bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e042      	b.n	800247c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe fbc4 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	@ 0x24
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fa09 	bl	8002840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800243c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800244c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800245c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	@ 0x28
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d175      	bne.n	8002590 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_UART_Transmit+0x2c>
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e06e      	b.n	8002592 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2221      	movs	r2, #33	@ 0x21
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024c2:	f7fe fd67 	bl	8000f94 <HAL_GetTick>
 80024c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024dc:	d108      	bne.n	80024f0 <HAL_UART_Transmit+0x6c>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d104      	bne.n	80024f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	e003      	b.n	80024f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024f8:	e02e      	b.n	8002558 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	2180      	movs	r1, #128	@ 0x80
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f8df 	bl	80026c8 <UART_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e03a      	b.n	8002592 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002530:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	3302      	adds	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	e007      	b.n	800254a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1cb      	bne.n	80024fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2140      	movs	r1, #64	@ 0x40
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f8ab 	bl	80026c8 <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e006      	b.n	8002592 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b08a      	sub	sp, #40	@ 0x28
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	f040 8081 	bne.w	80026be <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_UART_Receive+0x2e>
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e079      	b.n	80026c0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2222      	movs	r2, #34	@ 0x22
 80025d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fcd8 	bl	8000f94 <HAL_GetTick>
 80025e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	88fa      	ldrh	r2, [r7, #6]
 80025ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	88fa      	ldrh	r2, [r7, #6]
 80025f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025fa:	d108      	bne.n	800260e <HAL_UART_Receive+0x74>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	e003      	b.n	8002616 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002616:	e047      	b.n	80026a8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2200      	movs	r2, #0
 8002620:	2120      	movs	r1, #32
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f850 	bl	80026c8 <UART_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e042      	b.n	80026c0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10c      	bne.n	800265a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264c:	b29a      	uxth	r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	3302      	adds	r3, #2
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e01f      	b.n	800269a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002662:	d007      	beq.n	8002674 <HAL_UART_Receive+0xda>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_UART_Receive+0xe8>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d106      	bne.n	8002682 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e008      	b.n	8002694 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800268e:	b2da      	uxtb	r2, r3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3301      	adds	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1b2      	bne.n	8002618 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d8:	e03b      	b.n	8002752 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026e0:	d037      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7fe fc57 	bl	8000f94 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	6a3a      	ldr	r2, [r7, #32]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e03a      	b.n	8002772 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d023      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0x8a>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b80      	cmp	r3, #128	@ 0x80
 800270e:	d020      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b40      	cmp	r3, #64	@ 0x40
 8002714:	d01d      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b08      	cmp	r3, #8
 8002722:	d116      	bne.n	8002752 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f81d 	bl	800277a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2208      	movs	r2, #8
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	429a      	cmp	r2, r3
 800276e:	d0b4      	beq.n	80026da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800277a:	b480      	push	{r7}
 800277c:	b095      	sub	sp, #84	@ 0x54
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80027a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e5      	bne.n	8002782 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3314      	adds	r3, #20
 80027d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027de:	e841 2300 	strex	r3, r2, [r1]
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e5      	bne.n	80027b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d119      	bne.n	8002826 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	330c      	adds	r3, #12
 80027f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	e853 3f00 	ldrex	r3, [r3]
 8002800:	60bb      	str	r3, [r7, #8]
   return(result);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f023 0310 	bic.w	r3, r3, #16
 8002808:	647b      	str	r3, [r7, #68]	@ 0x44
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002812:	61ba      	str	r2, [r7, #24]
 8002814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6979      	ldr	r1, [r7, #20]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	613b      	str	r3, [r7, #16]
   return(result);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e5      	bne.n	80027f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002834:	bf00      	nop
 8002836:	3754      	adds	r7, #84	@ 0x54
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002844:	b0c0      	sub	sp, #256	@ 0x100
 8002846:	af00      	add	r7, sp, #0
 8002848:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285c:	68d9      	ldr	r1, [r3, #12]
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	ea40 0301 	orr.w	r3, r0, r1
 8002868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	431a      	orrs	r2, r3
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	431a      	orrs	r2, r3
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002898:	f021 010c 	bic.w	r1, r1, #12
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028a6:	430b      	orrs	r3, r1
 80028a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ba:	6999      	ldr	r1, [r3, #24]
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	ea40 0301 	orr.w	r3, r0, r1
 80028c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b8f      	ldr	r3, [pc, #572]	@ (8002b0c <UART_SetConfig+0x2cc>)
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d005      	beq.n	80028e0 <UART_SetConfig+0xa0>
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b8d      	ldr	r3, [pc, #564]	@ (8002b10 <UART_SetConfig+0x2d0>)
 80028dc:	429a      	cmp	r2, r3
 80028de:	d104      	bne.n	80028ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028e0:	f7ff fa98 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 80028e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028e8:	e003      	b.n	80028f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028ea:	f7ff fa7f 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 80028ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028fc:	f040 810c 	bne.w	8002b18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002904:	2200      	movs	r2, #0
 8002906:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800290a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800290e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002912:	4622      	mov	r2, r4
 8002914:	462b      	mov	r3, r5
 8002916:	1891      	adds	r1, r2, r2
 8002918:	65b9      	str	r1, [r7, #88]	@ 0x58
 800291a:	415b      	adcs	r3, r3
 800291c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800291e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002922:	4621      	mov	r1, r4
 8002924:	eb12 0801 	adds.w	r8, r2, r1
 8002928:	4629      	mov	r1, r5
 800292a:	eb43 0901 	adc.w	r9, r3, r1
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800293a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800293e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002942:	4690      	mov	r8, r2
 8002944:	4699      	mov	r9, r3
 8002946:	4623      	mov	r3, r4
 8002948:	eb18 0303 	adds.w	r3, r8, r3
 800294c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002950:	462b      	mov	r3, r5
 8002952:	eb49 0303 	adc.w	r3, r9, r3
 8002956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800295a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002966:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800296a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800296e:	460b      	mov	r3, r1
 8002970:	18db      	adds	r3, r3, r3
 8002972:	653b      	str	r3, [r7, #80]	@ 0x50
 8002974:	4613      	mov	r3, r2
 8002976:	eb42 0303 	adc.w	r3, r2, r3
 800297a:	657b      	str	r3, [r7, #84]	@ 0x54
 800297c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002984:	f7fd fc74 	bl	8000270 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4b61      	ldr	r3, [pc, #388]	@ (8002b14 <UART_SetConfig+0x2d4>)
 800298e:	fba3 2302 	umull	r2, r3, r3, r2
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	011c      	lsls	r4, r3, #4
 8002996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800299a:	2200      	movs	r2, #0
 800299c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029a8:	4642      	mov	r2, r8
 80029aa:	464b      	mov	r3, r9
 80029ac:	1891      	adds	r1, r2, r2
 80029ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029b0:	415b      	adcs	r3, r3
 80029b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029b8:	4641      	mov	r1, r8
 80029ba:	eb12 0a01 	adds.w	sl, r2, r1
 80029be:	4649      	mov	r1, r9
 80029c0:	eb43 0b01 	adc.w	fp, r3, r1
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029d8:	4692      	mov	sl, r2
 80029da:	469b      	mov	fp, r3
 80029dc:	4643      	mov	r3, r8
 80029de:	eb1a 0303 	adds.w	r3, sl, r3
 80029e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029e6:	464b      	mov	r3, r9
 80029e8:	eb4b 0303 	adc.w	r3, fp, r3
 80029ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a04:	460b      	mov	r3, r1
 8002a06:	18db      	adds	r3, r3, r3
 8002a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	eb42 0303 	adc.w	r3, r2, r3
 8002a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a1a:	f7fd fc29 	bl	8000270 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4611      	mov	r1, r2
 8002a24:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <UART_SetConfig+0x2d4>)
 8002a26:	fba3 2301 	umull	r2, r3, r3, r1
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2264      	movs	r2, #100	@ 0x64
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	1acb      	subs	r3, r1, r3
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a3a:	4b36      	ldr	r3, [pc, #216]	@ (8002b14 <UART_SetConfig+0x2d4>)
 8002a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a48:	441c      	add	r4, r3
 8002a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a5c:	4642      	mov	r2, r8
 8002a5e:	464b      	mov	r3, r9
 8002a60:	1891      	adds	r1, r2, r2
 8002a62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a64:	415b      	adcs	r3, r3
 8002a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a6c:	4641      	mov	r1, r8
 8002a6e:	1851      	adds	r1, r2, r1
 8002a70:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a72:	4649      	mov	r1, r9
 8002a74:	414b      	adcs	r3, r1
 8002a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a84:	4659      	mov	r1, fp
 8002a86:	00cb      	lsls	r3, r1, #3
 8002a88:	4651      	mov	r1, sl
 8002a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a8e:	4651      	mov	r1, sl
 8002a90:	00ca      	lsls	r2, r1, #3
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	4603      	mov	r3, r0
 8002a98:	4642      	mov	r2, r8
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aa0:	464b      	mov	r3, r9
 8002aa2:	460a      	mov	r2, r1
 8002aa4:	eb42 0303 	adc.w	r3, r2, r3
 8002aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	18db      	adds	r3, r3, r3
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	eb42 0303 	adc.w	r3, r2, r3
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ad6:	f7fd fbcb 	bl	8000270 <__aeabi_uldivmod>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <UART_SetConfig+0x2d4>)
 8002ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	2164      	movs	r1, #100	@ 0x64
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	3332      	adds	r3, #50	@ 0x32
 8002af2:	4a08      	ldr	r2, [pc, #32]	@ (8002b14 <UART_SetConfig+0x2d4>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	f003 0207 	and.w	r2, r3, #7
 8002afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4422      	add	r2, r4
 8002b06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b08:	e106      	b.n	8002d18 <UART_SetConfig+0x4d8>
 8002b0a:	bf00      	nop
 8002b0c:	40011000 	.word	0x40011000
 8002b10:	40011400 	.word	0x40011400
 8002b14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b2a:	4642      	mov	r2, r8
 8002b2c:	464b      	mov	r3, r9
 8002b2e:	1891      	adds	r1, r2, r2
 8002b30:	6239      	str	r1, [r7, #32]
 8002b32:	415b      	adcs	r3, r3
 8002b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	1854      	adds	r4, r2, r1
 8002b3e:	4649      	mov	r1, r9
 8002b40:	eb43 0501 	adc.w	r5, r3, r1
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	00eb      	lsls	r3, r5, #3
 8002b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b52:	00e2      	lsls	r2, r4, #3
 8002b54:	4614      	mov	r4, r2
 8002b56:	461d      	mov	r5, r3
 8002b58:	4643      	mov	r3, r8
 8002b5a:	18e3      	adds	r3, r4, r3
 8002b5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b60:	464b      	mov	r3, r9
 8002b62:	eb45 0303 	adc.w	r3, r5, r3
 8002b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b86:	4629      	mov	r1, r5
 8002b88:	008b      	lsls	r3, r1, #2
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b90:	4621      	mov	r1, r4
 8002b92:	008a      	lsls	r2, r1, #2
 8002b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b98:	f7fd fb6a 	bl	8000270 <__aeabi_uldivmod>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4b60      	ldr	r3, [pc, #384]	@ (8002d24 <UART_SetConfig+0x4e4>)
 8002ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	011c      	lsls	r4, r3, #4
 8002baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bbc:	4642      	mov	r2, r8
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	1891      	adds	r1, r2, r2
 8002bc2:	61b9      	str	r1, [r7, #24]
 8002bc4:	415b      	adcs	r3, r3
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bcc:	4641      	mov	r1, r8
 8002bce:	1851      	adds	r1, r2, r1
 8002bd0:	6139      	str	r1, [r7, #16]
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	414b      	adcs	r3, r1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be4:	4659      	mov	r1, fp
 8002be6:	00cb      	lsls	r3, r1, #3
 8002be8:	4651      	mov	r1, sl
 8002bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bee:	4651      	mov	r1, sl
 8002bf0:	00ca      	lsls	r2, r1, #3
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	189b      	adds	r3, r3, r2
 8002bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c00:	464b      	mov	r3, r9
 8002c02:	460a      	mov	r2, r1
 8002c04:	eb42 0303 	adc.w	r3, r2, r3
 8002c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c24:	4649      	mov	r1, r9
 8002c26:	008b      	lsls	r3, r1, #2
 8002c28:	4641      	mov	r1, r8
 8002c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c2e:	4641      	mov	r1, r8
 8002c30:	008a      	lsls	r2, r1, #2
 8002c32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c36:	f7fd fb1b 	bl	8000270 <__aeabi_uldivmod>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <UART_SetConfig+0x4e4>)
 8002c42:	fba3 2301 	umull	r2, r3, r3, r1
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2264      	movs	r2, #100	@ 0x64
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	1acb      	subs	r3, r1, r3
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	3332      	adds	r3, #50	@ 0x32
 8002c54:	4a33      	ldr	r2, [pc, #204]	@ (8002d24 <UART_SetConfig+0x4e4>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c60:	441c      	add	r4, r3
 8002c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c66:	2200      	movs	r2, #0
 8002c68:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	1891      	adds	r1, r2, r2
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c80:	4641      	mov	r1, r8
 8002c82:	1851      	adds	r1, r2, r1
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	4649      	mov	r1, r9
 8002c88:	414b      	adcs	r3, r1
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c98:	4659      	mov	r1, fp
 8002c9a:	00cb      	lsls	r3, r1, #3
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	00ca      	lsls	r2, r1, #3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	4642      	mov	r2, r8
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	eb42 0303 	adc.w	r3, r2, r3
 8002cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cd4:	4649      	mov	r1, r9
 8002cd6:	008b      	lsls	r3, r1, #2
 8002cd8:	4641      	mov	r1, r8
 8002cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cde:	4641      	mov	r1, r8
 8002ce0:	008a      	lsls	r2, r1, #2
 8002ce2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ce6:	f7fd fac3 	bl	8000270 <__aeabi_uldivmod>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <UART_SetConfig+0x4e4>)
 8002cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	2164      	movs	r1, #100	@ 0x64
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	3332      	adds	r3, #50	@ 0x32
 8002d02:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <UART_SetConfig+0x4e4>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	f003 020f 	and.w	r2, r3, #15
 8002d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4422      	add	r2, r4
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d24:	51eb851f 	.word	0x51eb851f

08002d28 <__NVIC_SetPriority>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	6039      	str	r1, [r7, #0]
 8002d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	db0a      	blt.n	8002d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	490c      	ldr	r1, [pc, #48]	@ (8002d74 <__NVIC_SetPriority+0x4c>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d50:	e00a      	b.n	8002d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4908      	ldr	r1, [pc, #32]	@ (8002d78 <__NVIC_SetPriority+0x50>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	3b04      	subs	r3, #4
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	440b      	add	r3, r1
 8002d66:	761a      	strb	r2, [r3, #24]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000e100 	.word	0xe000e100
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <SysTick_Handler+0x1c>)
 8002d82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002d84:	f001 fec6 	bl	8004b14 <xTaskGetSchedulerState>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002d8e:	f002 fcbb 	bl	8005708 <xPortSysTickHandler>
  }
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002da0:	2100      	movs	r1, #0
 8002da2:	f06f 0004 	mvn.w	r0, #4
 8002da6:	f7ff ffbf 	bl	8002d28 <__NVIC_SetPriority>
#endif
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002db6:	f3ef 8305 	mrs	r3, IPSR
 8002dba:	603b      	str	r3, [r7, #0]
  return(result);
 8002dbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002dc2:	f06f 0305 	mvn.w	r3, #5
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	e00c      	b.n	8002de4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002dca:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <osKernelInitialize+0x44>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002dd2:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <osKernelInitialize+0x44>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	e002      	b.n	8002de4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002de2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002de4:	687b      	ldr	r3, [r7, #4]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	2000013c 	.word	0x2000013c

08002df8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dfe:	f3ef 8305 	mrs	r3, IPSR
 8002e02:	603b      	str	r3, [r7, #0]
  return(result);
 8002e04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002e0a:	f06f 0305 	mvn.w	r3, #5
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	e010      	b.n	8002e34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e12:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <osKernelStart+0x48>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d109      	bne.n	8002e2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e1a:	f7ff ffbf 	bl	8002d9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <osKernelStart+0x48>)
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e24:	f001 fa12 	bl	800424c <vTaskStartScheduler>
      stat = osOK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	e002      	b.n	8002e34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e34:	687b      	ldr	r3, [r7, #4]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000013c 	.word	0x2000013c

08002e44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08e      	sub	sp, #56	@ 0x38
 8002e48:	af04      	add	r7, sp, #16
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e54:	f3ef 8305 	mrs	r3, IPSR
 8002e58:	617b      	str	r3, [r7, #20]
  return(result);
 8002e5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d17e      	bne.n	8002f5e <osThreadNew+0x11a>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d07b      	beq.n	8002f5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002e6a:	2318      	movs	r3, #24
 8002e6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d045      	beq.n	8002f0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <osThreadNew+0x48>
        name = attr->name;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <osThreadNew+0x6e>
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b38      	cmp	r3, #56	@ 0x38
 8002ea4:	d805      	bhi.n	8002eb2 <osThreadNew+0x6e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <osThreadNew+0x72>
        return (NULL);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e054      	b.n	8002f60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <osThreadNew+0xa8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2ba7      	cmp	r3, #167	@ 0xa7
 8002ed4:	d90a      	bls.n	8002eec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <osThreadNew+0xa8>
        mem = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	e010      	b.n	8002f0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10c      	bne.n	8002f0e <osThreadNew+0xca>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d108      	bne.n	8002f0e <osThreadNew+0xca>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <osThreadNew+0xca>
          mem = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	e001      	b.n	8002f0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d110      	bne.n	8002f36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f1c:	9202      	str	r2, [sp, #8]
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 ff9a 	bl	8003e64 <xTaskCreateStatic>
 8002f30:	4603      	mov	r3, r0
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	e013      	b.n	8002f5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d110      	bne.n	8002f5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 ffe8 	bl	8003f24 <xTaskCreate>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <osThreadNew+0x11a>
            hTask = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f5e:	693b      	ldr	r3, [r7, #16]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3728      	adds	r7, #40	@ 0x28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f70:	f3ef 8305 	mrs	r3, IPSR
 8002f74:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <osDelay+0x1c>
    stat = osErrorISR;
 8002f7c:	f06f 0305 	mvn.w	r3, #5
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e007      	b.n	8002f94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f001 f926 	bl	80041e0 <vTaskDelay>
    }
  }

  return (stat);
 8002f94:	68fb      	ldr	r3, [r7, #12]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b08a      	sub	sp, #40	@ 0x28
 8002fa2:	af02      	add	r7, sp, #8
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fae:	f3ef 8305 	mrs	r3, IPSR
 8002fb2:	613b      	str	r3, [r7, #16]
  return(result);
 8002fb4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d175      	bne.n	80030a6 <osSemaphoreNew+0x108>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d072      	beq.n	80030a6 <osSemaphoreNew+0x108>
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d86e      	bhi.n	80030a6 <osSemaphoreNew+0x108>
    mem = -1;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fcc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <osSemaphoreNew+0x4c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b4f      	cmp	r3, #79	@ 0x4f
 8002fe2:	d902      	bls.n	8002fea <osSemaphoreNew+0x4c>
        mem = 1;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e00c      	b.n	8003004 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <osSemaphoreNew+0x66>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d104      	bne.n	8003004 <osSemaphoreNew+0x66>
          mem = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e001      	b.n	8003004 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800300a:	d04c      	beq.n	80030a6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d128      	bne.n	8003064 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10a      	bne.n	800302e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2203      	movs	r2, #3
 800301e:	9200      	str	r2, [sp, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	2001      	movs	r0, #1
 8003026:	f000 f995 	bl	8003354 <xQueueGenericCreateStatic>
 800302a:	61f8      	str	r0, [r7, #28]
 800302c:	e005      	b.n	800303a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800302e:	2203      	movs	r2, #3
 8003030:	2100      	movs	r1, #0
 8003032:	2001      	movs	r0, #1
 8003034:	f000 fa0b 	bl	800344e <xQueueGenericCreate>
 8003038:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d022      	beq.n	8003086 <osSemaphoreNew+0xe8>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01f      	beq.n	8003086 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003046:	2300      	movs	r3, #0
 8003048:	2200      	movs	r2, #0
 800304a:	2100      	movs	r1, #0
 800304c:	69f8      	ldr	r0, [r7, #28]
 800304e:	f000 facb 	bl	80035e8 <xQueueGenericSend>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d016      	beq.n	8003086 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003058:	69f8      	ldr	r0, [r7, #28]
 800305a:	f000 fd47 	bl	8003aec <vQueueDelete>
            hSemaphore = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e010      	b.n	8003086 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d108      	bne.n	800307c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	461a      	mov	r2, r3
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fa49 	bl	800350a <xQueueCreateCountingSemaphoreStatic>
 8003078:	61f8      	str	r0, [r7, #28]
 800307a:	e004      	b.n	8003086 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa7c 	bl	800357c <xQueueCreateCountingSemaphore>
 8003084:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00c      	beq.n	80030a6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <osSemaphoreNew+0xfc>
          name = attr->name;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e001      	b.n	800309e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	69f8      	ldr	r0, [r7, #28]
 80030a2:	f000 fe57 	bl	8003d54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80030a6:	69fb      	ldr	r3, [r7, #28]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4a07      	ldr	r2, [pc, #28]	@ (80030dc <vApplicationGetIdleTaskMemory+0x2c>)
 80030c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4a06      	ldr	r2, [pc, #24]	@ (80030e0 <vApplicationGetIdleTaskMemory+0x30>)
 80030c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	601a      	str	r2, [r3, #0]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000140 	.word	0x20000140
 80030e0:	200001e8 	.word	0x200001e8

080030e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a07      	ldr	r2, [pc, #28]	@ (8003110 <vApplicationGetTimerTaskMemory+0x2c>)
 80030f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4a06      	ldr	r2, [pc, #24]	@ (8003114 <vApplicationGetTimerTaskMemory+0x30>)
 80030fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003102:	601a      	str	r2, [r3, #0]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	200003e8 	.word	0x200003e8
 8003114:	20000490 	.word	0x20000490

08003118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f103 0208 	add.w	r2, r3, #8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003130:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f103 0208 	add.w	r2, r3, #8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f103 0208 	add.w	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	601a      	str	r2, [r3, #0]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031d0:	d103      	bne.n	80031da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e00c      	b.n	80031f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3308      	adds	r3, #8
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e002      	b.n	80031e8 <vListInsert+0x2e>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d2f6      	bcs.n	80031e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	601a      	str	r2, [r3, #0]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6892      	ldr	r2, [r2, #8]
 8003242:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6852      	ldr	r2, [r2, #4]
 800324c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d103      	bne.n	8003260 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	1e5a      	subs	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032ac:	f002 f99c 	bl	80055e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	68f9      	ldr	r1, [r7, #12]
 80032ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	441a      	add	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032dc:	3b01      	subs	r3, #1
 80032de:	68f9      	ldr	r1, [r7, #12]
 80032e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	441a      	add	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	22ff      	movs	r2, #255	@ 0xff
 80032f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	22ff      	movs	r2, #255	@ 0xff
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d114      	bne.n	800332c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01a      	beq.n	8003340 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3310      	adds	r3, #16
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fa3a 	bl	8004788 <xTaskRemoveFromEventList>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <xQueueGenericReset+0xd0>)
 800331c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	e009      	b.n	8003340 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3310      	adds	r3, #16
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fef1 	bl	8003118 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3324      	adds	r3, #36	@ 0x24
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff feec 	bl	8003118 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003340:	f002 f984 	bl	800564c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003344:	2301      	movs	r3, #1
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	e000ed04 	.word	0xe000ed04

08003354 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	@ 0x38
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	e7fd      	b.n	800339a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <xQueueGenericCreateStatic+0x56>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <xQueueGenericCreateStatic+0x5a>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <xQueueGenericCreateStatic+0x5c>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10b      	bne.n	80033cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	623b      	str	r3, [r7, #32]
}
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	e7fd      	b.n	80033c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <xQueueGenericCreateStatic+0x84>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <xQueueGenericCreateStatic+0x88>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <xQueueGenericCreateStatic+0x8a>
 80033dc:	2300      	movs	r3, #0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	61fb      	str	r3, [r7, #28]
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033fa:	2350      	movs	r3, #80	@ 0x50
 80033fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b50      	cmp	r3, #80	@ 0x50
 8003402:	d00b      	beq.n	800341c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	61bb      	str	r3, [r7, #24]
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800341c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003430:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f840 	bl	80034c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003446:	4618      	mov	r0, r3
 8003448:	3730      	adds	r7, #48	@ 0x30
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800344e:	b580      	push	{r7, lr}
 8003450:	b08a      	sub	sp, #40	@ 0x28
 8003452:	af02      	add	r7, sp, #8
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	4613      	mov	r3, r2
 800345a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10b      	bne.n	800347a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	613b      	str	r3, [r7, #16]
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	fb02 f303 	mul.w	r3, r2, r3
 8003482:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	3350      	adds	r3, #80	@ 0x50
 8003488:	4618      	mov	r0, r3
 800348a:	f002 f9cf 	bl	800582c <pvPortMalloc>
 800348e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d011      	beq.n	80034ba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3350      	adds	r3, #80	@ 0x50
 800349e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034a8:	79fa      	ldrb	r2, [r7, #7]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f805 	bl	80034c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034ba:	69bb      	ldr	r3, [r7, #24]
	}
 80034bc:	4618      	mov	r0, r3
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e002      	b.n	80034e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034f2:	2101      	movs	r1, #1
 80034f4:	69b8      	ldr	r0, [r7, #24]
 80034f6:	f7ff fec3 	bl	8003280 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800350a:	b580      	push	{r7, lr}
 800350c:	b08a      	sub	sp, #40	@ 0x28
 800350e:	af02      	add	r7, sp, #8
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	61bb      	str	r3, [r7, #24]
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d90b      	bls.n	8003554 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	617b      	str	r3, [r7, #20]
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003554:	2302      	movs	r3, #2
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff fef8 	bl	8003354 <xQueueGenericCreateStatic>
 8003564:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003572:	69fb      	ldr	r3, [r7, #28]
	}
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	613b      	str	r3, [r7, #16]
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d90b      	bls.n	80035c4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	60fb      	str	r3, [r7, #12]
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80035c4:	2202      	movs	r2, #2
 80035c6:	2100      	movs	r1, #0
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff40 	bl	800344e <xQueueGenericCreate>
 80035ce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80035dc:	697b      	ldr	r3, [r7, #20]
	}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	@ 0x38
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <xQueueGenericSend+0x34>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <xQueueGenericSend+0x42>
 8003622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <xQueueGenericSend+0x46>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <xQueueGenericSend+0x48>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <xQueueGenericSend+0x64>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d103      	bne.n	800365a <xQueueGenericSend+0x72>
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <xQueueGenericSend+0x76>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <xQueueGenericSend+0x78>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <xQueueGenericSend+0x94>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	623b      	str	r3, [r7, #32]
}
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800367c:	f001 fa4a 	bl	8004b14 <xTaskGetSchedulerState>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <xQueueGenericSend+0xa4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <xQueueGenericSend+0xa8>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <xQueueGenericSend+0xaa>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <xQueueGenericSend+0xc6>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	61fb      	str	r3, [r7, #28]
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	e7fd      	b.n	80036aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036ae:	f001 ff9b 	bl	80055e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <xQueueGenericSend+0xdc>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d129      	bne.n	8003718 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036ca:	f000 fa33 	bl	8003b34 <prvCopyDataToQueue>
 80036ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	3324      	adds	r3, #36	@ 0x24
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 f853 	bl	8004788 <xTaskRemoveFromEventList>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036e8:	4b3f      	ldr	r3, [pc, #252]	@ (80037e8 <xQueueGenericSend+0x200>)
 80036ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	e00a      	b.n	8003710 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003700:	4b39      	ldr	r3, [pc, #228]	@ (80037e8 <xQueueGenericSend+0x200>)
 8003702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003710:	f001 ff9c 	bl	800564c <vPortExitCritical>
				return pdPASS;
 8003714:	2301      	movs	r3, #1
 8003716:	e063      	b.n	80037e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800371e:	f001 ff95 	bl	800564c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003722:	2300      	movs	r3, #0
 8003724:	e05c      	b.n	80037e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800372c:	f107 0314 	add.w	r3, r7, #20
 8003730:	4618      	mov	r0, r3
 8003732:	f001 f88d 	bl	8004850 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003736:	2301      	movs	r3, #1
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800373a:	f001 ff87 	bl	800564c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800373e:	f000 fdf5 	bl	800432c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003742:	f001 ff51 	bl	80055e8 <vPortEnterCritical>
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800374c:	b25b      	sxtb	r3, r3
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003752:	d103      	bne.n	800375c <xQueueGenericSend+0x174>
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003762:	b25b      	sxtb	r3, r3
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003768:	d103      	bne.n	8003772 <xQueueGenericSend+0x18a>
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003772:	f001 ff6b 	bl	800564c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003776:	1d3a      	adds	r2, r7, #4
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f001 f87c 	bl	800487c <xTaskCheckForTimeOut>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d124      	bne.n	80037d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800378a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800378c:	f000 faca 	bl	8003d24 <prvIsQueueFull>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d018      	beq.n	80037c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	3310      	adds	r3, #16
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4611      	mov	r1, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 ffa0 	bl	80046e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037a6:	f000 fa55 	bl	8003c54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037aa:	f000 fdcd 	bl	8004348 <xTaskResumeAll>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f47f af7c 	bne.w	80036ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80037b6:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <xQueueGenericSend+0x200>)
 80037b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	e772      	b.n	80036ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037ca:	f000 fa43 	bl	8003c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037ce:	f000 fdbb 	bl	8004348 <xTaskResumeAll>
 80037d2:	e76c      	b.n	80036ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037d6:	f000 fa3d 	bl	8003c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037da:	f000 fdb5 	bl	8004348 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3738      	adds	r7, #56	@ 0x38
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	e000ed04 	.word	0xe000ed04

080037ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b090      	sub	sp, #64	@ 0x40
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80037fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <xQueueGenericSendFromISR+0x3e>
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <xQueueGenericSendFromISR+0x42>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGenericSendFromISR+0x44>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d103      	bne.n	800385a <xQueueGenericSendFromISR+0x6e>
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <xQueueGenericSendFromISR+0x72>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <xQueueGenericSendFromISR+0x74>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	623b      	str	r3, [r7, #32]
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800387c:	f001 ff94 	bl	80057a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003880:	f3ef 8211 	mrs	r2, BASEPRI
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	61fa      	str	r2, [r7, #28]
 8003896:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003898:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800389a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800389c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <xQueueGenericSendFromISR+0xc2>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d12f      	bne.n	800390e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80038c4:	f000 f936 	bl	8003b34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038d0:	d112      	bne.n	80038f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038dc:	3324      	adds	r3, #36	@ 0x24
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 ff52 	bl	8004788 <xTaskRemoveFromEventList>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00b      	beq.n	8003908 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e007      	b.n	8003908 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80038fc:	3301      	adds	r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	b25a      	sxtb	r2, r3
 8003902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003908:	2301      	movs	r3, #1
 800390a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800390c:	e001      	b.n	8003912 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800390e:	2300      	movs	r3, #0
 8003910:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003914:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800391c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800391e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003920:	4618      	mov	r0, r3
 8003922:	3740      	adds	r7, #64	@ 0x40
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08c      	sub	sp, #48	@ 0x30
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003934:	2300      	movs	r3, #0
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <xQueueReceive+0x32>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	623b      	str	r3, [r7, #32]
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	e7fd      	b.n	8003956 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <xQueueReceive+0x40>
 8003960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <xQueueReceive+0x44>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <xQueueReceive+0x46>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10b      	bne.n	800398a <xQueueReceive+0x62>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	61fb      	str	r3, [r7, #28]
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	e7fd      	b.n	8003986 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800398a:	f001 f8c3 	bl	8004b14 <xTaskGetSchedulerState>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <xQueueReceive+0x72>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <xQueueReceive+0x76>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <xQueueReceive+0x78>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <xQueueReceive+0x94>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	61bb      	str	r3, [r7, #24]
}
 80039b6:	bf00      	nop
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039bc:	f001 fe14 	bl	80055e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01f      	beq.n	8003a0c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039d0:	f000 f91a 	bl	8003c08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	1e5a      	subs	r2, r3, #1
 80039d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00f      	beq.n	8003a04 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	3310      	adds	r3, #16
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fecd 	bl	8004788 <xTaskRemoveFromEventList>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039f4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ae8 <xQueueReceive+0x1c0>)
 80039f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a04:	f001 fe22 	bl	800564c <vPortExitCritical>
				return pdPASS;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e069      	b.n	8003ae0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a12:	f001 fe1b 	bl	800564c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e062      	b.n	8003ae0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a20:	f107 0310 	add.w	r3, r7, #16
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 ff13 	bl	8004850 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a2e:	f001 fe0d 	bl	800564c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a32:	f000 fc7b 	bl	800432c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a36:	f001 fdd7 	bl	80055e8 <vPortEnterCritical>
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a40:	b25b      	sxtb	r3, r3
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a46:	d103      	bne.n	8003a50 <xQueueReceive+0x128>
 8003a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a5c:	d103      	bne.n	8003a66 <xQueueReceive+0x13e>
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a66:	f001 fdf1 	bl	800564c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a6a:	1d3a      	adds	r2, r7, #4
 8003a6c:	f107 0310 	add.w	r3, r7, #16
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 ff02 	bl	800487c <xTaskCheckForTimeOut>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d123      	bne.n	8003ac6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a80:	f000 f93a 	bl	8003cf8 <prvIsQueueEmpty>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d017      	beq.n	8003aba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	3324      	adds	r3, #36	@ 0x24
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fe26 	bl	80046e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a9a:	f000 f8db 	bl	8003c54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a9e:	f000 fc53 	bl	8004348 <xTaskResumeAll>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d189      	bne.n	80039bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <xQueueReceive+0x1c0>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	e780      	b.n	80039bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003aba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003abc:	f000 f8ca 	bl	8003c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ac0:	f000 fc42 	bl	8004348 <xTaskResumeAll>
 8003ac4:	e77a      	b.n	80039bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ac8:	f000 f8c4 	bl	8003c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003acc:	f000 fc3c 	bl	8004348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ad0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ad2:	f000 f911 	bl	8003cf8 <prvIsQueueEmpty>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f43f af6f 	beq.w	80039bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ade:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3730      	adds	r7, #48	@ 0x30
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <vQueueDelete+0x2a>
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	60bb      	str	r3, [r7, #8]
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	e7fd      	b.n	8003b12 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f946 	bl	8003da8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f001 ff4e 	bl	80059c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d14d      	bne.n	8003bf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fff6 	bl	8004b50 <xTaskPriorityDisinherit>
 8003b64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	e043      	b.n	8003bf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d119      	bne.n	8003ba8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6858      	ldr	r0, [r3, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	f002 fa99 	bl	80060b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	441a      	add	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d32b      	bcc.n	8003bf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	e026      	b.n	8003bf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68d8      	ldr	r0, [r3, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	f002 fa7f 	bl	80060b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	425b      	negs	r3, r3
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d207      	bcs.n	8003be4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	425b      	negs	r3, r3
 8003bde:	441a      	add	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d105      	bne.n	8003bf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003bfe:	697b      	ldr	r3, [r7, #20]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d018      	beq.n	8003c4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	441a      	add	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d303      	bcc.n	8003c3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68d9      	ldr	r1, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	461a      	mov	r2, r3
 8003c46:	6838      	ldr	r0, [r7, #0]
 8003c48:	f002 fa35 	bl	80060b6 <memcpy>
	}
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c5c:	f001 fcc4 	bl	80055e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c68:	e011      	b.n	8003c8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3324      	adds	r3, #36	@ 0x24
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fd86 	bl	8004788 <xTaskRemoveFromEventList>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c82:	f000 fe5f 	bl	8004944 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	dce9      	bgt.n	8003c6a <prvUnlockQueue+0x16>
 8003c96:	e000      	b.n	8003c9a <prvUnlockQueue+0x46>
					break;
 8003c98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	22ff      	movs	r2, #255	@ 0xff
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ca2:	f001 fcd3 	bl	800564c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ca6:	f001 fc9f 	bl	80055e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cb2:	e011      	b.n	8003cd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d012      	beq.n	8003ce2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3310      	adds	r3, #16
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fd61 	bl	8004788 <xTaskRemoveFromEventList>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ccc:	f000 fe3a 	bl	8004944 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cd0:	7bbb      	ldrb	r3, [r7, #14]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	dce9      	bgt.n	8003cb4 <prvUnlockQueue+0x60>
 8003ce0:	e000      	b.n	8003ce4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ce2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	22ff      	movs	r2, #255	@ 0xff
 8003ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003cec:	f001 fcae 	bl	800564c <vPortExitCritical>
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d00:	f001 fc72 	bl	80055e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e001      	b.n	8003d16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d16:	f001 fc99 	bl	800564c <vPortExitCritical>

	return xReturn;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d2c:	f001 fc5c 	bl	80055e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d102      	bne.n	8003d42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e001      	b.n	8003d46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d46:	f001 fc81 	bl	800564c <vPortExitCritical>

	return xReturn;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e014      	b.n	8003d8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d64:	4a0f      	ldr	r2, [pc, #60]	@ (8003da4 <vQueueAddToRegistry+0x50>)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d70:	490c      	ldr	r1, [pc, #48]	@ (8003da4 <vQueueAddToRegistry+0x50>)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003da4 <vQueueAddToRegistry+0x50>)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d86:	e006      	b.n	8003d96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b07      	cmp	r3, #7
 8003d92:	d9e7      	bls.n	8003d64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000890 	.word	0x20000890

08003da8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e016      	b.n	8003de4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003db6:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <vQueueUnregisterQueue+0x50>)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d10b      	bne.n	8003dde <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003df8 <vQueueUnregisterQueue+0x50>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003dd0:	4a09      	ldr	r2, [pc, #36]	@ (8003df8 <vQueueUnregisterQueue+0x50>)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	2200      	movs	r2, #0
 8003dda:	605a      	str	r2, [r3, #4]
				break;
 8003ddc:	e006      	b.n	8003dec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b07      	cmp	r3, #7
 8003de8:	d9e5      	bls.n	8003db6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	20000890 	.word	0x20000890

08003dfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e0c:	f001 fbec 	bl	80055e8 <vPortEnterCritical>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e1c:	d103      	bne.n	8003e26 <vQueueWaitForMessageRestricted+0x2a>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e32:	d103      	bne.n	8003e3c <vQueueWaitForMessageRestricted+0x40>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e3c:	f001 fc06 	bl	800564c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3324      	adds	r3, #36	@ 0x24
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fc6d 	bl	8004730 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	f7ff fefc 	bl	8003c54 <prvUnlockQueue>
	}
 8003e5c:	bf00      	nop
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	@ 0x38
 8003e68:	af04      	add	r7, sp, #16
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	623b      	str	r3, [r7, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	e7fd      	b.n	8003e8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	61fb      	str	r3, [r7, #28]
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	e7fd      	b.n	8003eaa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eae:	23a8      	movs	r3, #168	@ 0xa8
 8003eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2ba8      	cmp	r3, #168	@ 0xa8
 8003eb6:	d00b      	beq.n	8003ed0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	61bb      	str	r3, [r7, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ed0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01e      	beq.n	8003f16 <xTaskCreateStatic+0xb2>
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01b      	beq.n	8003f16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	9303      	str	r3, [sp, #12]
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	9302      	str	r3, [sp, #8]
 8003ef8:	f107 0314 	add.w	r3, r7, #20
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f851 	bl	8003fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f10:	f000 f8f6 	bl	8004100 <prvAddNewTaskToReadyList>
 8003f14:	e001      	b.n	8003f1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f1a:	697b      	ldr	r3, [r7, #20]
	}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3728      	adds	r7, #40	@ 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	@ 0x30
 8003f28:	af04      	add	r7, sp, #16
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 fc77 	bl	800582c <pvPortMalloc>
 8003f3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00e      	beq.n	8003f64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f46:	20a8      	movs	r0, #168	@ 0xa8
 8003f48:	f001 fc70 	bl	800582c <pvPortMalloc>
 8003f4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f5a:	e005      	b.n	8003f68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f5c:	6978      	ldr	r0, [r7, #20]
 8003f5e:	f001 fd33 	bl	80059c8 <vPortFree>
 8003f62:	e001      	b.n	8003f68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d017      	beq.n	8003f9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f76:	88fa      	ldrh	r2, [r7, #6]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9303      	str	r3, [sp, #12]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	9302      	str	r3, [sp, #8]
 8003f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f80f 	bl	8003fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f92:	69f8      	ldr	r0, [r7, #28]
 8003f94:	f000 f8b4 	bl	8004100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	e002      	b.n	8003fa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fa4:	69bb      	ldr	r3, [r7, #24]
	}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	21a5      	movs	r1, #165	@ 0xa5
 8003fca:	f001 ffe9 	bl	8005fa0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f023 0307 	bic.w	r3, r3, #7
 8003fe6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	617b      	str	r3, [r7, #20]
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01f      	beq.n	8004050 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	e012      	b.n	800403c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	4413      	add	r3, r2
 800401c:	7819      	ldrb	r1, [r3, #0]
 800401e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	3334      	adds	r3, #52	@ 0x34
 8004026:	460a      	mov	r2, r1
 8004028:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3301      	adds	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b0f      	cmp	r3, #15
 8004040:	d9e9      	bls.n	8004016 <prvInitialiseNewTask+0x66>
 8004042:	e000      	b.n	8004046 <prvInitialiseNewTask+0x96>
			{
				break;
 8004044:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800404e:	e003      	b.n	8004058 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405a:	2b37      	cmp	r3, #55	@ 0x37
 800405c:	d901      	bls.n	8004062 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800405e:	2337      	movs	r3, #55	@ 0x37
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004066:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800406c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	2200      	movs	r2, #0
 8004072:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	3304      	adds	r3, #4
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f86d 	bl	8003158 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800407e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004080:	3318      	adds	r3, #24
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff f868 	bl	8003158 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800408c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	3354      	adds	r3, #84	@ 0x54
 80040b2:	224c      	movs	r2, #76	@ 0x4c
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 ff72 	bl	8005fa0 <memset>
 80040bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040be:	4a0d      	ldr	r2, [pc, #52]	@ (80040f4 <prvInitialiseNewTask+0x144>)
 80040c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	4a0c      	ldr	r2, [pc, #48]	@ (80040f8 <prvInitialiseNewTask+0x148>)
 80040c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ca:	4a0c      	ldr	r2, [pc, #48]	@ (80040fc <prvInitialiseNewTask+0x14c>)
 80040cc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	69b8      	ldr	r0, [r7, #24]
 80040d4:	f001 f95a 	bl	800538c <pxPortInitialiseStack>
 80040d8:	4602      	mov	r2, r0
 80040da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ea:	bf00      	nop
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20004b24 	.word	0x20004b24
 80040f8:	20004b8c 	.word	0x20004b8c
 80040fc:	20004bf4 	.word	0x20004bf4

08004100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004108:	f001 fa6e 	bl	80055e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800410c:	4b2d      	ldr	r3, [pc, #180]	@ (80041c4 <prvAddNewTaskToReadyList+0xc4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3301      	adds	r3, #1
 8004112:	4a2c      	ldr	r2, [pc, #176]	@ (80041c4 <prvAddNewTaskToReadyList+0xc4>)
 8004114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004116:	4b2c      	ldr	r3, [pc, #176]	@ (80041c8 <prvAddNewTaskToReadyList+0xc8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800411e:	4a2a      	ldr	r2, [pc, #168]	@ (80041c8 <prvAddNewTaskToReadyList+0xc8>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004124:	4b27      	ldr	r3, [pc, #156]	@ (80041c4 <prvAddNewTaskToReadyList+0xc4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d110      	bne.n	800414e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800412c:	f000 fc2e 	bl	800498c <prvInitialiseTaskLists>
 8004130:	e00d      	b.n	800414e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004132:	4b26      	ldr	r3, [pc, #152]	@ (80041cc <prvAddNewTaskToReadyList+0xcc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800413a:	4b23      	ldr	r3, [pc, #140]	@ (80041c8 <prvAddNewTaskToReadyList+0xc8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	429a      	cmp	r2, r3
 8004146:	d802      	bhi.n	800414e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004148:	4a1f      	ldr	r2, [pc, #124]	@ (80041c8 <prvAddNewTaskToReadyList+0xc8>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800414e:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <prvAddNewTaskToReadyList+0xd0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	4a1e      	ldr	r2, [pc, #120]	@ (80041d0 <prvAddNewTaskToReadyList+0xd0>)
 8004156:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004158:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <prvAddNewTaskToReadyList+0xd0>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <prvAddNewTaskToReadyList+0xd4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d903      	bls.n	8004174 <prvAddNewTaskToReadyList+0x74>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	4a18      	ldr	r2, [pc, #96]	@ (80041d4 <prvAddNewTaskToReadyList+0xd4>)
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <prvAddNewTaskToReadyList+0xd8>)
 8004182:	441a      	add	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f7fe fff1 	bl	8003172 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004190:	f001 fa5c 	bl	800564c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004194:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <prvAddNewTaskToReadyList+0xcc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00e      	beq.n	80041ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800419c:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <prvAddNewTaskToReadyList+0xc8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d207      	bcs.n	80041ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041aa:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <prvAddNewTaskToReadyList+0xdc>)
 80041ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000da4 	.word	0x20000da4
 80041c8:	200008d0 	.word	0x200008d0
 80041cc:	20000db0 	.word	0x20000db0
 80041d0:	20000dc0 	.word	0x20000dc0
 80041d4:	20000dac 	.word	0x20000dac
 80041d8:	200008d4 	.word	0x200008d4
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041f2:	4b14      	ldr	r3, [pc, #80]	@ (8004244 <vTaskDelay+0x64>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <vTaskDelay+0x32>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004212:	f000 f88b 	bl	800432c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004216:	2100      	movs	r1, #0
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fd09 	bl	8004c30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800421e:	f000 f893 	bl	8004348 <xTaskResumeAll>
 8004222:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d107      	bne.n	800423a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800422a:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <vTaskDelay+0x68>)
 800422c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000dcc 	.word	0x20000dcc
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	@ 0x28
 8004250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800425a:	463a      	mov	r2, r7
 800425c:	1d39      	adds	r1, r7, #4
 800425e:	f107 0308 	add.w	r3, r7, #8
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe ff24 	bl	80030b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004268:	6839      	ldr	r1, [r7, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	9202      	str	r2, [sp, #8]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	2300      	movs	r3, #0
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2300      	movs	r3, #0
 8004278:	460a      	mov	r2, r1
 800427a:	4924      	ldr	r1, [pc, #144]	@ (800430c <vTaskStartScheduler+0xc0>)
 800427c:	4824      	ldr	r0, [pc, #144]	@ (8004310 <vTaskStartScheduler+0xc4>)
 800427e:	f7ff fdf1 	bl	8003e64 <xTaskCreateStatic>
 8004282:	4603      	mov	r3, r0
 8004284:	4a23      	ldr	r2, [pc, #140]	@ (8004314 <vTaskStartScheduler+0xc8>)
 8004286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004288:	4b22      	ldr	r3, [pc, #136]	@ (8004314 <vTaskStartScheduler+0xc8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004290:	2301      	movs	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e001      	b.n	800429a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d102      	bne.n	80042a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042a0:	f000 fd1a 	bl	8004cd8 <xTimerCreateTimerTask>
 80042a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d11b      	bne.n	80042e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	613b      	str	r3, [r7, #16]
}
 80042be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042c0:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <vTaskStartScheduler+0xcc>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3354      	adds	r3, #84	@ 0x54
 80042c6:	4a15      	ldr	r2, [pc, #84]	@ (800431c <vTaskStartScheduler+0xd0>)
 80042c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042ca:	4b15      	ldr	r3, [pc, #84]	@ (8004320 <vTaskStartScheduler+0xd4>)
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042d2:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <vTaskStartScheduler+0xd8>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042d8:	4b13      	ldr	r3, [pc, #76]	@ (8004328 <vTaskStartScheduler+0xdc>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042de:	f001 f8df 	bl	80054a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042e2:	e00f      	b.n	8004304 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042ea:	d10b      	bne.n	8004304 <vTaskStartScheduler+0xb8>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	60fb      	str	r3, [r7, #12]
}
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <vTaskStartScheduler+0xb4>
}
 8004304:	bf00      	nop
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	08006e3c 	.word	0x08006e3c
 8004310:	0800495d 	.word	0x0800495d
 8004314:	20000dc8 	.word	0x20000dc8
 8004318:	200008d0 	.word	0x200008d0
 800431c:	20000020 	.word	0x20000020
 8004320:	20000dc4 	.word	0x20000dc4
 8004324:	20000db0 	.word	0x20000db0
 8004328:	20000da8 	.word	0x20000da8

0800432c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <vTaskSuspendAll+0x18>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	4a03      	ldr	r2, [pc, #12]	@ (8004344 <vTaskSuspendAll+0x18>)
 8004338:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20000dcc 	.word	0x20000dcc

08004348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004356:	4b42      	ldr	r3, [pc, #264]	@ (8004460 <xTaskResumeAll+0x118>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <xTaskResumeAll+0x2e>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	603b      	str	r3, [r7, #0]
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	e7fd      	b.n	8004372 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004376:	f001 f937 	bl	80055e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800437a:	4b39      	ldr	r3, [pc, #228]	@ (8004460 <xTaskResumeAll+0x118>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3b01      	subs	r3, #1
 8004380:	4a37      	ldr	r2, [pc, #220]	@ (8004460 <xTaskResumeAll+0x118>)
 8004382:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004384:	4b36      	ldr	r3, [pc, #216]	@ (8004460 <xTaskResumeAll+0x118>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d162      	bne.n	8004452 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800438c:	4b35      	ldr	r3, [pc, #212]	@ (8004464 <xTaskResumeAll+0x11c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05e      	beq.n	8004452 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004394:	e02f      	b.n	80043f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004396:	4b34      	ldr	r3, [pc, #208]	@ (8004468 <xTaskResumeAll+0x120>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3318      	adds	r3, #24
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe ff42 	bl	800322c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe ff3d 	bl	800322c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b6:	4b2d      	ldr	r3, [pc, #180]	@ (800446c <xTaskResumeAll+0x124>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d903      	bls.n	80043c6 <xTaskResumeAll+0x7e>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c2:	4a2a      	ldr	r2, [pc, #168]	@ (800446c <xTaskResumeAll+0x124>)
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4a27      	ldr	r2, [pc, #156]	@ (8004470 <xTaskResumeAll+0x128>)
 80043d4:	441a      	add	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3304      	adds	r3, #4
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7fe fec8 	bl	8003172 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e6:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <xTaskResumeAll+0x12c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80043f0:	4b21      	ldr	r3, [pc, #132]	@ (8004478 <xTaskResumeAll+0x130>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <xTaskResumeAll+0x120>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1cb      	bne.n	8004396 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004404:	f000 fb66 	bl	8004ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004408:	4b1c      	ldr	r3, [pc, #112]	@ (800447c <xTaskResumeAll+0x134>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d010      	beq.n	8004436 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004414:	f000 f846 	bl	80044a4 <xTaskIncrementTick>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800441e:	4b16      	ldr	r3, [pc, #88]	@ (8004478 <xTaskResumeAll+0x130>)
 8004420:	2201      	movs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f1      	bne.n	8004414 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004430:	4b12      	ldr	r3, [pc, #72]	@ (800447c <xTaskResumeAll+0x134>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004436:	4b10      	ldr	r3, [pc, #64]	@ (8004478 <xTaskResumeAll+0x130>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004442:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <xTaskResumeAll+0x138>)
 8004444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004452:	f001 f8fb 	bl	800564c <vPortExitCritical>

	return xAlreadyYielded;
 8004456:	68bb      	ldr	r3, [r7, #8]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000dcc 	.word	0x20000dcc
 8004464:	20000da4 	.word	0x20000da4
 8004468:	20000d64 	.word	0x20000d64
 800446c:	20000dac 	.word	0x20000dac
 8004470:	200008d4 	.word	0x200008d4
 8004474:	200008d0 	.word	0x200008d0
 8004478:	20000db8 	.word	0x20000db8
 800447c:	20000db4 	.word	0x20000db4
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800448a:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <xTaskGetTickCount+0x1c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004490:	687b      	ldr	r3, [r7, #4]
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000da8 	.word	0x20000da8

080044a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ae:	4b4f      	ldr	r3, [pc, #316]	@ (80045ec <xTaskIncrementTick+0x148>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 8090 	bne.w	80045d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044b8:	4b4d      	ldr	r3, [pc, #308]	@ (80045f0 <xTaskIncrementTick+0x14c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044c0:	4a4b      	ldr	r2, [pc, #300]	@ (80045f0 <xTaskIncrementTick+0x14c>)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d121      	bne.n	8004510 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80044cc:	4b49      	ldr	r3, [pc, #292]	@ (80045f4 <xTaskIncrementTick+0x150>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	603b      	str	r3, [r7, #0]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <xTaskIncrementTick+0x46>
 80044ee:	4b41      	ldr	r3, [pc, #260]	@ (80045f4 <xTaskIncrementTick+0x150>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	4b40      	ldr	r3, [pc, #256]	@ (80045f8 <xTaskIncrementTick+0x154>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a3e      	ldr	r2, [pc, #248]	@ (80045f4 <xTaskIncrementTick+0x150>)
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	4a3e      	ldr	r2, [pc, #248]	@ (80045f8 <xTaskIncrementTick+0x154>)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b3e      	ldr	r3, [pc, #248]	@ (80045fc <xTaskIncrementTick+0x158>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	4a3c      	ldr	r2, [pc, #240]	@ (80045fc <xTaskIncrementTick+0x158>)
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	f000 fae2 	bl	8004ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004510:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <xTaskIncrementTick+0x15c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d349      	bcc.n	80045ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800451a:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <xTaskIncrementTick+0x150>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004524:	4b36      	ldr	r3, [pc, #216]	@ (8004600 <xTaskIncrementTick+0x15c>)
 8004526:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800452a:	601a      	str	r2, [r3, #0]
					break;
 800452c:	e03f      	b.n	80045ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800452e:	4b31      	ldr	r3, [pc, #196]	@ (80045f4 <xTaskIncrementTick+0x150>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	429a      	cmp	r2, r3
 8004544:	d203      	bcs.n	800454e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004546:	4a2e      	ldr	r2, [pc, #184]	@ (8004600 <xTaskIncrementTick+0x15c>)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800454c:	e02f      	b.n	80045ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3304      	adds	r3, #4
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fe6a 	bl	800322c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	3318      	adds	r3, #24
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe fe61 	bl	800322c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456e:	4b25      	ldr	r3, [pc, #148]	@ (8004604 <xTaskIncrementTick+0x160>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d903      	bls.n	800457e <xTaskIncrementTick+0xda>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	4a22      	ldr	r2, [pc, #136]	@ (8004604 <xTaskIncrementTick+0x160>)
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4a1f      	ldr	r2, [pc, #124]	@ (8004608 <xTaskIncrementTick+0x164>)
 800458c:	441a      	add	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3304      	adds	r3, #4
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f7fe fdec 	bl	8003172 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459e:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <xTaskIncrementTick+0x168>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d3b8      	bcc.n	800451a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ac:	e7b5      	b.n	800451a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045ae:	4b17      	ldr	r3, [pc, #92]	@ (800460c <xTaskIncrementTick+0x168>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b4:	4914      	ldr	r1, [pc, #80]	@ (8004608 <xTaskIncrementTick+0x164>)
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d901      	bls.n	80045ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045ca:	4b11      	ldr	r3, [pc, #68]	@ (8004610 <xTaskIncrementTick+0x16c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80045d2:	2301      	movs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e004      	b.n	80045e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004614 <xTaskIncrementTick+0x170>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	4a0d      	ldr	r2, [pc, #52]	@ (8004614 <xTaskIncrementTick+0x170>)
 80045e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045e2:	697b      	ldr	r3, [r7, #20]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000dcc 	.word	0x20000dcc
 80045f0:	20000da8 	.word	0x20000da8
 80045f4:	20000d5c 	.word	0x20000d5c
 80045f8:	20000d60 	.word	0x20000d60
 80045fc:	20000dbc 	.word	0x20000dbc
 8004600:	20000dc4 	.word	0x20000dc4
 8004604:	20000dac 	.word	0x20000dac
 8004608:	200008d4 	.word	0x200008d4
 800460c:	200008d0 	.word	0x200008d0
 8004610:	20000db8 	.word	0x20000db8
 8004614:	20000db4 	.word	0x20000db4

08004618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800461e:	4b2b      	ldr	r3, [pc, #172]	@ (80046cc <vTaskSwitchContext+0xb4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004626:	4b2a      	ldr	r3, [pc, #168]	@ (80046d0 <vTaskSwitchContext+0xb8>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800462c:	e047      	b.n	80046be <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800462e:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <vTaskSwitchContext+0xb8>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004634:	4b27      	ldr	r3, [pc, #156]	@ (80046d4 <vTaskSwitchContext+0xbc>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e011      	b.n	8004660 <vTaskSwitchContext+0x48>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <vTaskSwitchContext+0x42>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	607b      	str	r3, [r7, #4]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <vTaskSwitchContext+0x3e>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b01      	subs	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	491d      	ldr	r1, [pc, #116]	@ (80046d8 <vTaskSwitchContext+0xc0>)
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0e3      	beq.n	800463c <vTaskSwitchContext+0x24>
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4a16      	ldr	r2, [pc, #88]	@ (80046d8 <vTaskSwitchContext+0xc0>)
 8004680:	4413      	add	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	3308      	adds	r3, #8
 8004696:	429a      	cmp	r2, r3
 8004698:	d104      	bne.n	80046a4 <vTaskSwitchContext+0x8c>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	605a      	str	r2, [r3, #4]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4a0c      	ldr	r2, [pc, #48]	@ (80046dc <vTaskSwitchContext+0xc4>)
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4a09      	ldr	r2, [pc, #36]	@ (80046d4 <vTaskSwitchContext+0xbc>)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046b4:	4b09      	ldr	r3, [pc, #36]	@ (80046dc <vTaskSwitchContext+0xc4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3354      	adds	r3, #84	@ 0x54
 80046ba:	4a09      	ldr	r2, [pc, #36]	@ (80046e0 <vTaskSwitchContext+0xc8>)
 80046bc:	6013      	str	r3, [r2, #0]
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	20000dcc 	.word	0x20000dcc
 80046d0:	20000db8 	.word	0x20000db8
 80046d4:	20000dac 	.word	0x20000dac
 80046d8:	200008d4 	.word	0x200008d4
 80046dc:	200008d0 	.word	0x200008d0
 80046e0:	20000020 	.word	0x20000020

080046e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800470c:	4b07      	ldr	r3, [pc, #28]	@ (800472c <vTaskPlaceOnEventList+0x48>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3318      	adds	r3, #24
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7fe fd50 	bl	80031ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800471a:	2101      	movs	r1, #1
 800471c:	6838      	ldr	r0, [r7, #0]
 800471e:	f000 fa87 	bl	8004c30 <prvAddCurrentTaskToDelayedList>
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200008d0 	.word	0x200008d0

08004730 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	617b      	str	r3, [r7, #20]
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	e7fd      	b.n	8004756 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800475a:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <vTaskPlaceOnEventListRestricted+0x54>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3318      	adds	r3, #24
 8004760:	4619      	mov	r1, r3
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7fe fd05 	bl	8003172 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004772:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	68b8      	ldr	r0, [r7, #8]
 8004778:	f000 fa5a 	bl	8004c30 <prvAddCurrentTaskToDelayedList>
	}
 800477c:	bf00      	nop
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200008d0 	.word	0x200008d0

08004788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60fb      	str	r3, [r7, #12]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3318      	adds	r3, #24
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fd36 	bl	800322c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004838 <xTaskRemoveFromEventList+0xb0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11d      	bne.n	8004804 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe fd2d 	bl	800322c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d6:	4b19      	ldr	r3, [pc, #100]	@ (800483c <xTaskRemoveFromEventList+0xb4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d903      	bls.n	80047e6 <xTaskRemoveFromEventList+0x5e>
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	4a16      	ldr	r2, [pc, #88]	@ (800483c <xTaskRemoveFromEventList+0xb4>)
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4a13      	ldr	r2, [pc, #76]	@ (8004840 <xTaskRemoveFromEventList+0xb8>)
 80047f4:	441a      	add	r2, r3
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f7fe fcb8 	bl	8003172 <vListInsertEnd>
 8004802:	e005      	b.n	8004810 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	3318      	adds	r3, #24
 8004808:	4619      	mov	r1, r3
 800480a:	480e      	ldr	r0, [pc, #56]	@ (8004844 <xTaskRemoveFromEventList+0xbc>)
 800480c:	f7fe fcb1 	bl	8003172 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004814:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <xTaskRemoveFromEventList+0xc0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	429a      	cmp	r2, r3
 800481c:	d905      	bls.n	800482a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004822:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <xTaskRemoveFromEventList+0xc4>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e001      	b.n	800482e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800482e:	697b      	ldr	r3, [r7, #20]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000dcc 	.word	0x20000dcc
 800483c:	20000dac 	.word	0x20000dac
 8004840:	200008d4 	.word	0x200008d4
 8004844:	20000d64 	.word	0x20000d64
 8004848:	200008d0 	.word	0x200008d0
 800484c:	20000db8 	.word	0x20000db8

08004850 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004858:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <vTaskInternalSetTimeOutState+0x24>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004860:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <vTaskInternalSetTimeOutState+0x28>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	605a      	str	r2, [r3, #4]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	20000dbc 	.word	0x20000dbc
 8004878:	20000da8 	.word	0x20000da8

0800487c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10b      	bne.n	80048a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	613b      	str	r3, [r7, #16]
}
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
 80048a2:	e7fd      	b.n	80048a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	60fb      	str	r3, [r7, #12]
}
 80048bc:	bf00      	nop
 80048be:	bf00      	nop
 80048c0:	e7fd      	b.n	80048be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80048c2:	f000 fe91 	bl	80055e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048c6:	4b1d      	ldr	r3, [pc, #116]	@ (800493c <xTaskCheckForTimeOut+0xc0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048de:	d102      	bne.n	80048e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e023      	b.n	800492e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b15      	ldr	r3, [pc, #84]	@ (8004940 <xTaskCheckForTimeOut+0xc4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d007      	beq.n	8004902 <xTaskCheckForTimeOut+0x86>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d302      	bcc.n	8004902 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	e015      	b.n	800492e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	429a      	cmp	r2, r3
 800490a:	d20b      	bcs.n	8004924 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff ff99 	bl	8004850 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	e004      	b.n	800492e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800492a:	2301      	movs	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800492e:	f000 fe8d 	bl	800564c <vPortExitCritical>

	return xReturn;
 8004932:	69fb      	ldr	r3, [r7, #28]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000da8 	.word	0x20000da8
 8004940:	20000dbc 	.word	0x20000dbc

08004944 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004948:	4b03      	ldr	r3, [pc, #12]	@ (8004958 <vTaskMissedYield+0x14>)
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000db8 	.word	0x20000db8

0800495c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004964:	f000 f852 	bl	8004a0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004968:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <prvIdleTask+0x28>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d9f9      	bls.n	8004964 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <prvIdleTask+0x2c>)
 8004972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004980:	e7f0      	b.n	8004964 <prvIdleTask+0x8>
 8004982:	bf00      	nop
 8004984:	200008d4 	.word	0x200008d4
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004992:	2300      	movs	r3, #0
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	e00c      	b.n	80049b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4a12      	ldr	r2, [pc, #72]	@ (80049ec <prvInitialiseTaskLists+0x60>)
 80049a4:	4413      	add	r3, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fbb6 	bl	8003118 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3301      	adds	r3, #1
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b37      	cmp	r3, #55	@ 0x37
 80049b6:	d9ef      	bls.n	8004998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049b8:	480d      	ldr	r0, [pc, #52]	@ (80049f0 <prvInitialiseTaskLists+0x64>)
 80049ba:	f7fe fbad 	bl	8003118 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049be:	480d      	ldr	r0, [pc, #52]	@ (80049f4 <prvInitialiseTaskLists+0x68>)
 80049c0:	f7fe fbaa 	bl	8003118 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049c4:	480c      	ldr	r0, [pc, #48]	@ (80049f8 <prvInitialiseTaskLists+0x6c>)
 80049c6:	f7fe fba7 	bl	8003118 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049ca:	480c      	ldr	r0, [pc, #48]	@ (80049fc <prvInitialiseTaskLists+0x70>)
 80049cc:	f7fe fba4 	bl	8003118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049d0:	480b      	ldr	r0, [pc, #44]	@ (8004a00 <prvInitialiseTaskLists+0x74>)
 80049d2:	f7fe fba1 	bl	8003118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <prvInitialiseTaskLists+0x78>)
 80049d8:	4a05      	ldr	r2, [pc, #20]	@ (80049f0 <prvInitialiseTaskLists+0x64>)
 80049da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004a08 <prvInitialiseTaskLists+0x7c>)
 80049de:	4a05      	ldr	r2, [pc, #20]	@ (80049f4 <prvInitialiseTaskLists+0x68>)
 80049e0:	601a      	str	r2, [r3, #0]
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200008d4 	.word	0x200008d4
 80049f0:	20000d34 	.word	0x20000d34
 80049f4:	20000d48 	.word	0x20000d48
 80049f8:	20000d64 	.word	0x20000d64
 80049fc:	20000d78 	.word	0x20000d78
 8004a00:	20000d90 	.word	0x20000d90
 8004a04:	20000d5c 	.word	0x20000d5c
 8004a08:	20000d60 	.word	0x20000d60

08004a0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a12:	e019      	b.n	8004a48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a14:	f000 fde8 	bl	80055e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a18:	4b10      	ldr	r3, [pc, #64]	@ (8004a5c <prvCheckTasksWaitingTermination+0x50>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe fc01 	bl	800322c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a60 <prvCheckTasksWaitingTermination+0x54>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	4a0b      	ldr	r2, [pc, #44]	@ (8004a60 <prvCheckTasksWaitingTermination+0x54>)
 8004a32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a34:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <prvCheckTasksWaitingTermination+0x58>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a64 <prvCheckTasksWaitingTermination+0x58>)
 8004a3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a3e:	f000 fe05 	bl	800564c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f810 	bl	8004a68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a48:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <prvCheckTasksWaitingTermination+0x58>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e1      	bne.n	8004a14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000d78 	.word	0x20000d78
 8004a60:	20000da4 	.word	0x20000da4
 8004a64:	20000d8c 	.word	0x20000d8c

08004a68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3354      	adds	r3, #84	@ 0x54
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fa9b 	bl	8005fb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d108      	bne.n	8004a96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 ff9d 	bl	80059c8 <vPortFree>
				vPortFree( pxTCB );
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 ff9a 	bl	80059c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a94:	e019      	b.n	8004aca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d103      	bne.n	8004aa8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 ff91 	bl	80059c8 <vPortFree>
	}
 8004aa6:	e010      	b.n	8004aca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d00b      	beq.n	8004aca <prvDeleteTCB+0x62>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	60fb      	str	r3, [r7, #12]
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	e7fd      	b.n	8004ac6 <prvDeleteTCB+0x5e>
	}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ada:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <prvResetNextTaskUnblockTime+0x38>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b10 <prvResetNextTaskUnblockTime+0x3c>)
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004aea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004aec:	e008      	b.n	8004b00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aee:	4b07      	ldr	r3, [pc, #28]	@ (8004b0c <prvResetNextTaskUnblockTime+0x38>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a04      	ldr	r2, [pc, #16]	@ (8004b10 <prvResetNextTaskUnblockTime+0x3c>)
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20000d5c 	.word	0x20000d5c
 8004b10:	20000dc4 	.word	0x20000dc4

08004b14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <xTaskGetSchedulerState+0x34>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b22:	2301      	movs	r3, #1
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	e008      	b.n	8004b3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b28:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <xTaskGetSchedulerState+0x38>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b30:	2302      	movs	r3, #2
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	e001      	b.n	8004b3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b36:	2300      	movs	r3, #0
 8004b38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b3a:	687b      	ldr	r3, [r7, #4]
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	20000db0 	.word	0x20000db0
 8004b4c:	20000dcc 	.word	0x20000dcc

08004b50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d058      	beq.n	8004c18 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b66:	4b2f      	ldr	r3, [pc, #188]	@ (8004c24 <xTaskPriorityDisinherit+0xd4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d00b      	beq.n	8004b88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	60bb      	str	r3, [r7, #8]
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bac:	1e5a      	subs	r2, r3, #1
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d02c      	beq.n	8004c18 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d128      	bne.n	8004c18 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fb2e 	bl	800322c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c28 <xTaskPriorityDisinherit+0xd8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d903      	bls.n	8004bf8 <xTaskPriorityDisinherit+0xa8>
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8004c28 <xTaskPriorityDisinherit+0xd8>)
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4a09      	ldr	r2, [pc, #36]	@ (8004c2c <xTaskPriorityDisinherit+0xdc>)
 8004c06:	441a      	add	r2, r3
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f7fe faaf 	bl	8003172 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c18:	697b      	ldr	r3, [r7, #20]
	}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200008d0 	.word	0x200008d0
 8004c28:	20000dac 	.word	0x20000dac
 8004c2c:	200008d4 	.word	0x200008d4

08004c30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c3a:	4b21      	ldr	r3, [pc, #132]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c40:	4b20      	ldr	r3, [pc, #128]	@ (8004cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe faf0 	bl	800322c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c52:	d10a      	bne.n	8004c6a <prvAddCurrentTaskToDelayedList+0x3a>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4819      	ldr	r0, [pc, #100]	@ (8004cc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c64:	f7fe fa85 	bl	8003172 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c68:	e026      	b.n	8004cb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4413      	add	r3, r2
 8004c70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c72:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d209      	bcs.n	8004c96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f7fe fa93 	bl	80031ba <vListInsert>
}
 8004c94:	e010      	b.n	8004cb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c96:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7fe fa89 	bl	80031ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d202      	bcs.n	8004cb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cb2:	4a08      	ldr	r2, [pc, #32]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6013      	str	r3, [r2, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000da8 	.word	0x20000da8
 8004cc4:	200008d0 	.word	0x200008d0
 8004cc8:	20000d90 	.word	0x20000d90
 8004ccc:	20000d60 	.word	0x20000d60
 8004cd0:	20000d5c 	.word	0x20000d5c
 8004cd4:	20000dc4 	.word	0x20000dc4

08004cd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	@ 0x28
 8004cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ce2:	f000 fb13 	bl	800530c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d5c <xTimerCreateTimerTask+0x84>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d021      	beq.n	8004d32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cf6:	1d3a      	adds	r2, r7, #4
 8004cf8:	f107 0108 	add.w	r1, r7, #8
 8004cfc:	f107 030c 	add.w	r3, r7, #12
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe f9ef 	bl	80030e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	9202      	str	r2, [sp, #8]
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	2302      	movs	r3, #2
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	460a      	mov	r2, r1
 8004d18:	4911      	ldr	r1, [pc, #68]	@ (8004d60 <xTimerCreateTimerTask+0x88>)
 8004d1a:	4812      	ldr	r0, [pc, #72]	@ (8004d64 <xTimerCreateTimerTask+0x8c>)
 8004d1c:	f7ff f8a2 	bl	8003e64 <xTaskCreateStatic>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4a11      	ldr	r2, [pc, #68]	@ (8004d68 <xTimerCreateTimerTask+0x90>)
 8004d24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d26:	4b10      	ldr	r3, [pc, #64]	@ (8004d68 <xTimerCreateTimerTask+0x90>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	613b      	str	r3, [r7, #16]
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d50:	697b      	ldr	r3, [r7, #20]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000e00 	.word	0x20000e00
 8004d60:	08006e44 	.word	0x08006e44
 8004d64:	08004ea5 	.word	0x08004ea5
 8004d68:	20000e04 	.word	0x20000e04

08004d6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	@ 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <xTimerGenericCommand+0x30>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	623b      	str	r3, [r7, #32]
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d9c:	4b19      	ldr	r3, [pc, #100]	@ (8004e04 <xTimerGenericCommand+0x98>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02a      	beq.n	8004dfa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	dc18      	bgt.n	8004de8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004db6:	f7ff fead 	bl	8004b14 <xTaskGetSchedulerState>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d109      	bne.n	8004dd4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dc0:	4b10      	ldr	r3, [pc, #64]	@ (8004e04 <xTimerGenericCommand+0x98>)
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	f107 0110 	add.w	r1, r7, #16
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dcc:	f7fe fc0c 	bl	80035e8 <xQueueGenericSend>
 8004dd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004dd2:	e012      	b.n	8004dfa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <xTimerGenericCommand+0x98>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	f107 0110 	add.w	r1, r7, #16
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2200      	movs	r2, #0
 8004de0:	f7fe fc02 	bl	80035e8 <xQueueGenericSend>
 8004de4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004de6:	e008      	b.n	8004dfa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004de8:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <xTimerGenericCommand+0x98>)
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	f107 0110 	add.w	r1, r7, #16
 8004df0:	2300      	movs	r3, #0
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	f7fe fcfa 	bl	80037ec <xQueueGenericSendFromISR>
 8004df8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3728      	adds	r7, #40	@ 0x28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000e00 	.word	0x20000e00

08004e08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e12:	4b23      	ldr	r3, [pc, #140]	@ (8004ea0 <prvProcessExpiredTimer+0x98>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fa03 	bl	800322c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d023      	beq.n	8004e7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	18d1      	adds	r1, r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	6978      	ldr	r0, [r7, #20]
 8004e42:	f000 f8d5 	bl	8004ff0 <prvInsertTimerInActiveList>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d020      	beq.n	8004e8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2300      	movs	r3, #0
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	2100      	movs	r1, #0
 8004e56:	6978      	ldr	r0, [r7, #20]
 8004e58:	f7ff ff88 	bl	8004d6c <xTimerGenericCommand>
 8004e5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d114      	bne.n	8004e8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	60fb      	str	r3, [r7, #12]
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	e7fd      	b.n	8004e78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	4798      	blx	r3
}
 8004e96:	bf00      	nop
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000df8 	.word	0x20000df8

08004ea4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004eac:	f107 0308 	add.w	r3, r7, #8
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 f859 	bl	8004f68 <prvGetNextExpireTime>
 8004eb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f805 	bl	8004ecc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ec2:	f000 f8d7 	bl	8005074 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ec6:	bf00      	nop
 8004ec8:	e7f0      	b.n	8004eac <prvTimerTask+0x8>
	...

08004ecc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ed6:	f7ff fa29 	bl	800432c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eda:	f107 0308 	add.w	r3, r7, #8
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f866 	bl	8004fb0 <prvSampleTimeNow>
 8004ee4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d130      	bne.n	8004f4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <prvProcessTimerOrBlockTask+0x3c>
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d806      	bhi.n	8004f08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004efa:	f7ff fa25 	bl	8004348 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff81 	bl	8004e08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f06:	e024      	b.n	8004f52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f0e:	4b13      	ldr	r3, [pc, #76]	@ (8004f5c <prvProcessTimerOrBlockTask+0x90>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <prvProcessTimerOrBlockTask+0x50>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <prvProcessTimerOrBlockTask+0x52>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f20:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <prvProcessTimerOrBlockTask+0x94>)
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f7fe ff65 	bl	8003dfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f32:	f7ff fa09 	bl	8004348 <xTaskResumeAll>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f3c:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <prvProcessTimerOrBlockTask+0x98>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	f3bf 8f6f 	isb	sy
}
 8004f4c:	e001      	b.n	8004f52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f4e:	f7ff f9fb 	bl	8004348 <xTaskResumeAll>
}
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000dfc 	.word	0x20000dfc
 8004f60:	20000e00 	.word	0x20000e00
 8004f64:	e000ed04 	.word	0xe000ed04

08004f68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f70:	4b0e      	ldr	r3, [pc, #56]	@ (8004fac <prvGetNextExpireTime+0x44>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <prvGetNextExpireTime+0x16>
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	e000      	b.n	8004f80 <prvGetNextExpireTime+0x18>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f8c:	4b07      	ldr	r3, [pc, #28]	@ (8004fac <prvGetNextExpireTime+0x44>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e001      	b.n	8004f9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000df8 	.word	0x20000df8

08004fb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fb8:	f7ff fa64 	bl	8004484 <xTaskGetTickCount>
 8004fbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <prvSampleTimeNow+0x3c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d205      	bcs.n	8004fd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fc8:	f000 f93a 	bl	8005240 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e002      	b.n	8004fda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fda:	4a04      	ldr	r2, [pc, #16]	@ (8004fec <prvSampleTimeNow+0x3c>)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000e08 	.word	0x20000e08

08004ff0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d812      	bhi.n	800503c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	429a      	cmp	r2, r3
 8005022:	d302      	bcc.n	800502a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	e01b      	b.n	8005062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800502a:	4b10      	ldr	r3, [pc, #64]	@ (800506c <prvInsertTimerInActiveList+0x7c>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3304      	adds	r3, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7fe f8c0 	bl	80031ba <vListInsert>
 800503a:	e012      	b.n	8005062 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d206      	bcs.n	8005052 <prvInsertTimerInActiveList+0x62>
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800504c:	2301      	movs	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	e007      	b.n	8005062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <prvInsertTimerInActiveList+0x80>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3304      	adds	r3, #4
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f7fe f8ac 	bl	80031ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005062:	697b      	ldr	r3, [r7, #20]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20000dfc 	.word	0x20000dfc
 8005070:	20000df8 	.word	0x20000df8

08005074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08e      	sub	sp, #56	@ 0x38
 8005078:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800507a:	e0ce      	b.n	800521a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	da19      	bge.n	80050b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	3304      	adds	r3, #4
 8005086:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	61fb      	str	r3, [r7, #28]
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	e7fd      	b.n	80050a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ac:	6850      	ldr	r0, [r2, #4]
 80050ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050b0:	6892      	ldr	r2, [r2, #8]
 80050b2:	4611      	mov	r1, r2
 80050b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f2c0 80ae 	blt.w	800521a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe f8ac 	bl	800322c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050d4:	463b      	mov	r3, r7
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ff6a 	bl	8004fb0 <prvSampleTimeNow>
 80050dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b09      	cmp	r3, #9
 80050e2:	f200 8097 	bhi.w	8005214 <prvProcessReceivedCommands+0x1a0>
 80050e6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <prvProcessReceivedCommands+0x78>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005115 	.word	0x08005115
 80050f0:	08005115 	.word	0x08005115
 80050f4:	08005115 	.word	0x08005115
 80050f8:	0800518b 	.word	0x0800518b
 80050fc:	0800519f 	.word	0x0800519f
 8005100:	080051eb 	.word	0x080051eb
 8005104:	08005115 	.word	0x08005115
 8005108:	08005115 	.word	0x08005115
 800510c:	0800518b 	.word	0x0800518b
 8005110:	0800519f 	.word	0x0800519f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	18d1      	adds	r1, r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005134:	f7ff ff5c 	bl	8004ff0 <prvInsertTimerInActiveList>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d06c      	beq.n	8005218 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d061      	beq.n	8005218 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	441a      	add	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	2300      	movs	r3, #0
 8005162:	2100      	movs	r1, #0
 8005164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005166:	f7ff fe01 	bl	8004d6c <xTimerGenericCommand>
 800516a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d152      	bne.n	8005218 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	61bb      	str	r3, [r7, #24]
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	e7fd      	b.n	8005186 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	b2da      	uxtb	r2, r3
 8005196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005198:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800519c:	e03d      	b.n	800521a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	617b      	str	r3, [r7, #20]
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	18d1      	adds	r1, r2, r3
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051e4:	f7ff ff04 	bl	8004ff0 <prvInsertTimerInActiveList>
					break;
 80051e8:	e017      	b.n	800521a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d103      	bne.n	8005200 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80051f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051fa:	f000 fbe5 	bl	80059c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051fe:	e00c      	b.n	800521a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005206:	f023 0301 	bic.w	r3, r3, #1
 800520a:	b2da      	uxtb	r2, r3
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005212:	e002      	b.n	800521a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <prvProcessReceivedCommands+0x1a6>
					break;
 8005218:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800521a:	4b08      	ldr	r3, [pc, #32]	@ (800523c <prvProcessReceivedCommands+0x1c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	1d39      	adds	r1, r7, #4
 8005220:	2200      	movs	r2, #0
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe fb80 	bl	8003928 <xQueueReceive>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	f47f af26 	bne.w	800507c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	3730      	adds	r7, #48	@ 0x30
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000e00 	.word	0x20000e00

08005240 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005246:	e049      	b.n	80052dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005248:	4b2e      	ldr	r3, [pc, #184]	@ (8005304 <prvSwitchTimerLists+0xc4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005252:	4b2c      	ldr	r3, [pc, #176]	@ (8005304 <prvSwitchTimerLists+0xc4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3304      	adds	r3, #4
 8005260:	4618      	mov	r0, r3
 8005262:	f7fd ffe3 	bl	800322c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02f      	beq.n	80052dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4413      	add	r3, r2
 8005284:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	429a      	cmp	r2, r3
 800528c:	d90e      	bls.n	80052ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800529a:	4b1a      	ldr	r3, [pc, #104]	@ (8005304 <prvSwitchTimerLists+0xc4>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f7fd ff88 	bl	80031ba <vListInsert>
 80052aa:	e017      	b.n	80052dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052ac:	2300      	movs	r3, #0
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	2300      	movs	r3, #0
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	2100      	movs	r1, #0
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7ff fd58 	bl	8004d6c <xTimerGenericCommand>
 80052bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	603b      	str	r3, [r7, #0]
}
 80052d6:	bf00      	nop
 80052d8:	bf00      	nop
 80052da:	e7fd      	b.n	80052d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052dc:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <prvSwitchTimerLists+0xc4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1b0      	bne.n	8005248 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052e6:	4b07      	ldr	r3, [pc, #28]	@ (8005304 <prvSwitchTimerLists+0xc4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052ec:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <prvSwitchTimerLists+0xc8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a04      	ldr	r2, [pc, #16]	@ (8005304 <prvSwitchTimerLists+0xc4>)
 80052f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052f4:	4a04      	ldr	r2, [pc, #16]	@ (8005308 <prvSwitchTimerLists+0xc8>)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6013      	str	r3, [r2, #0]
}
 80052fa:	bf00      	nop
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000df8 	.word	0x20000df8
 8005308:	20000dfc 	.word	0x20000dfc

0800530c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005312:	f000 f969 	bl	80055e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005316:	4b15      	ldr	r3, [pc, #84]	@ (800536c <prvCheckForValidListAndQueue+0x60>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d120      	bne.n	8005360 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800531e:	4814      	ldr	r0, [pc, #80]	@ (8005370 <prvCheckForValidListAndQueue+0x64>)
 8005320:	f7fd fefa 	bl	8003118 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005324:	4813      	ldr	r0, [pc, #76]	@ (8005374 <prvCheckForValidListAndQueue+0x68>)
 8005326:	f7fd fef7 	bl	8003118 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800532a:	4b13      	ldr	r3, [pc, #76]	@ (8005378 <prvCheckForValidListAndQueue+0x6c>)
 800532c:	4a10      	ldr	r2, [pc, #64]	@ (8005370 <prvCheckForValidListAndQueue+0x64>)
 800532e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005330:	4b12      	ldr	r3, [pc, #72]	@ (800537c <prvCheckForValidListAndQueue+0x70>)
 8005332:	4a10      	ldr	r2, [pc, #64]	@ (8005374 <prvCheckForValidListAndQueue+0x68>)
 8005334:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005336:	2300      	movs	r3, #0
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	4b11      	ldr	r3, [pc, #68]	@ (8005380 <prvCheckForValidListAndQueue+0x74>)
 800533c:	4a11      	ldr	r2, [pc, #68]	@ (8005384 <prvCheckForValidListAndQueue+0x78>)
 800533e:	2110      	movs	r1, #16
 8005340:	200a      	movs	r0, #10
 8005342:	f7fe f807 	bl	8003354 <xQueueGenericCreateStatic>
 8005346:	4603      	mov	r3, r0
 8005348:	4a08      	ldr	r2, [pc, #32]	@ (800536c <prvCheckForValidListAndQueue+0x60>)
 800534a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800534c:	4b07      	ldr	r3, [pc, #28]	@ (800536c <prvCheckForValidListAndQueue+0x60>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005354:	4b05      	ldr	r3, [pc, #20]	@ (800536c <prvCheckForValidListAndQueue+0x60>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	490b      	ldr	r1, [pc, #44]	@ (8005388 <prvCheckForValidListAndQueue+0x7c>)
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fcfa 	bl	8003d54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005360:	f000 f974 	bl	800564c <vPortExitCritical>
}
 8005364:	bf00      	nop
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000e00 	.word	0x20000e00
 8005370:	20000dd0 	.word	0x20000dd0
 8005374:	20000de4 	.word	0x20000de4
 8005378:	20000df8 	.word	0x20000df8
 800537c:	20000dfc 	.word	0x20000dfc
 8005380:	20000eac 	.word	0x20000eac
 8005384:	20000e0c 	.word	0x20000e0c
 8005388:	08006e4c 	.word	0x08006e4c

0800538c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3b04      	subs	r3, #4
 800539c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b04      	subs	r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3b04      	subs	r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053bc:	4a0c      	ldr	r2, [pc, #48]	@ (80053f0 <pxPortInitialiseStack+0x64>)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b14      	subs	r3, #20
 80053c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f06f 0202 	mvn.w	r2, #2
 80053da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3b20      	subs	r3, #32
 80053e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	080053f5 	.word	0x080053f5

080053f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053fe:	4b13      	ldr	r3, [pc, #76]	@ (800544c <prvTaskExitError+0x58>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005406:	d00b      	beq.n	8005420 <prvTaskExitError+0x2c>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	60fb      	str	r3, [r7, #12]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <prvTaskExitError+0x28>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60bb      	str	r3, [r7, #8]
}
 8005432:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005434:	bf00      	nop
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0fc      	beq.n	8005436 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000010 	.word	0x20000010

08005450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005450:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <pxCurrentTCBConst2>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	6808      	ldr	r0, [r1, #0]
 8005456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	f380 8809 	msr	PSP, r0
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	4770      	bx	lr
 800546c:	f3af 8000 	nop.w

08005470 <pxCurrentTCBConst2>:
 8005470:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005478:	4808      	ldr	r0, [pc, #32]	@ (800549c <prvPortStartFirstTask+0x24>)
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f380 8808 	msr	MSP, r0
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8814 	msr	CONTROL, r0
 800548a:	b662      	cpsie	i
 800548c:	b661      	cpsie	f
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	df00      	svc	0
 8005498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800549a:	bf00      	nop
 800549c:	e000ed08 	.word	0xe000ed08

080054a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054a6:	4b47      	ldr	r3, [pc, #284]	@ (80055c4 <xPortStartScheduler+0x124>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a47      	ldr	r2, [pc, #284]	@ (80055c8 <xPortStartScheduler+0x128>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10b      	bne.n	80054c8 <xPortStartScheduler+0x28>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054c8:	4b3e      	ldr	r3, [pc, #248]	@ (80055c4 <xPortStartScheduler+0x124>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3f      	ldr	r2, [pc, #252]	@ (80055cc <xPortStartScheduler+0x12c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10b      	bne.n	80054ea <xPortStartScheduler+0x4a>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60fb      	str	r3, [r7, #12]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054ea:	4b39      	ldr	r3, [pc, #228]	@ (80055d0 <xPortStartScheduler+0x130>)
 80054ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	22ff      	movs	r2, #255	@ 0xff
 80054fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800550c:	b2da      	uxtb	r2, r3
 800550e:	4b31      	ldr	r3, [pc, #196]	@ (80055d4 <xPortStartScheduler+0x134>)
 8005510:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005512:	4b31      	ldr	r3, [pc, #196]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005514:	2207      	movs	r2, #7
 8005516:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005518:	e009      	b.n	800552e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800551a:	4b2f      	ldr	r3, [pc, #188]	@ (80055d8 <xPortStartScheduler+0x138>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3b01      	subs	r3, #1
 8005520:	4a2d      	ldr	r2, [pc, #180]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005522:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005536:	2b80      	cmp	r3, #128	@ 0x80
 8005538:	d0ef      	beq.n	800551a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800553a:	4b27      	ldr	r3, [pc, #156]	@ (80055d8 <xPortStartScheduler+0x138>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	d00b      	beq.n	800555e <xPortStartScheduler+0xbe>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60bb      	str	r3, [r7, #8]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800555e:	4b1e      	ldr	r3, [pc, #120]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	4a1c      	ldr	r2, [pc, #112]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005568:	4b1b      	ldr	r3, [pc, #108]	@ (80055d8 <xPortStartScheduler+0x138>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005570:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800557c:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <xPortStartScheduler+0x13c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a16      	ldr	r2, [pc, #88]	@ (80055dc <xPortStartScheduler+0x13c>)
 8005582:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005588:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <xPortStartScheduler+0x13c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <xPortStartScheduler+0x13c>)
 800558e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005594:	f000 f8da 	bl	800574c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005598:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <xPortStartScheduler+0x140>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800559e:	f000 f8f9 	bl	8005794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <xPortStartScheduler+0x144>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a0f      	ldr	r2, [pc, #60]	@ (80055e4 <xPortStartScheduler+0x144>)
 80055a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80055ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055ae:	f7ff ff63 	bl	8005478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055b2:	f7ff f831 	bl	8004618 <vTaskSwitchContext>
	prvTaskExitError();
 80055b6:	f7ff ff1d 	bl	80053f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	e000ed00 	.word	0xe000ed00
 80055c8:	410fc271 	.word	0x410fc271
 80055cc:	410fc270 	.word	0x410fc270
 80055d0:	e000e400 	.word	0xe000e400
 80055d4:	20000efc 	.word	0x20000efc
 80055d8:	20000f00 	.word	0x20000f00
 80055dc:	e000ed20 	.word	0xe000ed20
 80055e0:	20000010 	.word	0x20000010
 80055e4:	e000ef34 	.word	0xe000ef34

080055e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	607b      	str	r3, [r7, #4]
}
 8005600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005602:	4b10      	ldr	r3, [pc, #64]	@ (8005644 <vPortEnterCritical+0x5c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	4a0e      	ldr	r2, [pc, #56]	@ (8005644 <vPortEnterCritical+0x5c>)
 800560a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800560c:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <vPortEnterCritical+0x5c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d110      	bne.n	8005636 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005614:	4b0c      	ldr	r3, [pc, #48]	@ (8005648 <vPortEnterCritical+0x60>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <vPortEnterCritical+0x4e>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	603b      	str	r3, [r7, #0]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <vPortEnterCritical+0x4a>
	}
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000010 	.word	0x20000010
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005652:	4b12      	ldr	r3, [pc, #72]	@ (800569c <vPortExitCritical+0x50>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <vPortExitCritical+0x26>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	607b      	str	r3, [r7, #4]
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005672:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <vPortExitCritical+0x50>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3b01      	subs	r3, #1
 8005678:	4a08      	ldr	r2, [pc, #32]	@ (800569c <vPortExitCritical+0x50>)
 800567a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800567c:	4b07      	ldr	r3, [pc, #28]	@ (800569c <vPortExitCritical+0x50>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <vPortExitCritical+0x44>
 8005684:	2300      	movs	r3, #0
 8005686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f383 8811 	msr	BASEPRI, r3
}
 800568e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20000010 	.word	0x20000010

080056a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056a0:	f3ef 8009 	mrs	r0, PSP
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <pxCurrentTCBConst>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f01e 0f10 	tst.w	lr, #16
 80056b0:	bf08      	it	eq
 80056b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ba:	6010      	str	r0, [r2, #0]
 80056bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056c4:	f380 8811 	msr	BASEPRI, r0
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f7fe ffa2 	bl	8004618 <vTaskSwitchContext>
 80056d4:	f04f 0000 	mov.w	r0, #0
 80056d8:	f380 8811 	msr	BASEPRI, r0
 80056dc:	bc09      	pop	{r0, r3}
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	6808      	ldr	r0, [r1, #0]
 80056e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e6:	f01e 0f10 	tst.w	lr, #16
 80056ea:	bf08      	it	eq
 80056ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056f0:	f380 8809 	msr	PSP, r0
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	f3af 8000 	nop.w

08005700 <pxCurrentTCBConst>:
 8005700:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop

08005708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	607b      	str	r3, [r7, #4]
}
 8005720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005722:	f7fe febf 	bl	80044a4 <xTaskIncrementTick>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800572c:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <xPortSysTickHandler+0x40>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f383 8811 	msr	BASEPRI, r3
}
 800573e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005756:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <vPortSetupTimerInterrupt+0x38>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800575c:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <vPortSetupTimerInterrupt+0x3c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <vPortSetupTimerInterrupt+0x40>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <vPortSetupTimerInterrupt+0x44>)
 800576a:	3b01      	subs	r3, #1
 800576c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800576e:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005770:	2207      	movs	r2, #7
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	e000e010 	.word	0xe000e010
 8005784:	e000e018 	.word	0xe000e018
 8005788:	20000004 	.word	0x20000004
 800578c:	10624dd3 	.word	0x10624dd3
 8005790:	e000e014 	.word	0xe000e014

08005794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005794:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80057a4 <vPortEnableVFP+0x10>
 8005798:	6801      	ldr	r1, [r0, #0]
 800579a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800579e:	6001      	str	r1, [r0, #0]
 80057a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057a2:	bf00      	nop
 80057a4:	e000ed88 	.word	0xe000ed88

080057a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057ae:	f3ef 8305 	mrs	r3, IPSR
 80057b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b0f      	cmp	r3, #15
 80057b8:	d915      	bls.n	80057e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ba:	4a18      	ldr	r2, [pc, #96]	@ (800581c <vPortValidateInterruptPriority+0x74>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057c4:	4b16      	ldr	r3, [pc, #88]	@ (8005820 <vPortValidateInterruptPriority+0x78>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	7afa      	ldrb	r2, [r7, #11]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d20b      	bcs.n	80057e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	607b      	str	r3, [r7, #4]
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	e7fd      	b.n	80057e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <vPortValidateInterruptPriority+0x7c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80057ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005828 <vPortValidateInterruptPriority+0x80>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d90b      	bls.n	800580e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	603b      	str	r3, [r7, #0]
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <vPortValidateInterruptPriority+0x62>
	}
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	e000e3f0 	.word	0xe000e3f0
 8005820:	20000efc 	.word	0x20000efc
 8005824:	e000ed0c 	.word	0xe000ed0c
 8005828:	20000f00 	.word	0x20000f00

0800582c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	@ 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005834:	2300      	movs	r3, #0
 8005836:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005838:	f7fe fd78 	bl	800432c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800583c:	4b5c      	ldr	r3, [pc, #368]	@ (80059b0 <pvPortMalloc+0x184>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005844:	f000 f924 	bl	8005a90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005848:	4b5a      	ldr	r3, [pc, #360]	@ (80059b4 <pvPortMalloc+0x188>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	f040 8095 	bne.w	8005980 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01e      	beq.n	800589a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800585c:	2208      	movs	r2, #8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	2b00      	cmp	r3, #0
 800586c:	d015      	beq.n	800589a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f023 0307 	bic.w	r3, r3, #7
 8005874:	3308      	adds	r3, #8
 8005876:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <pvPortMalloc+0x6e>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	617b      	str	r3, [r7, #20]
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	e7fd      	b.n	8005896 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d06f      	beq.n	8005980 <pvPortMalloc+0x154>
 80058a0:	4b45      	ldr	r3, [pc, #276]	@ (80059b8 <pvPortMalloc+0x18c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d86a      	bhi.n	8005980 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058aa:	4b44      	ldr	r3, [pc, #272]	@ (80059bc <pvPortMalloc+0x190>)
 80058ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058ae:	4b43      	ldr	r3, [pc, #268]	@ (80059bc <pvPortMalloc+0x190>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b4:	e004      	b.n	80058c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d903      	bls.n	80058d2 <pvPortMalloc+0xa6>
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f1      	bne.n	80058b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058d2:	4b37      	ldr	r3, [pc, #220]	@ (80059b0 <pvPortMalloc+0x184>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d8:	429a      	cmp	r2, r3
 80058da:	d051      	beq.n	8005980 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2208      	movs	r2, #8
 80058e2:	4413      	add	r3, r2
 80058e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	1ad2      	subs	r2, r2, r3
 80058f6:	2308      	movs	r3, #8
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d920      	bls.n	8005940 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <pvPortMalloc+0xfc>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800593a:	69b8      	ldr	r0, [r7, #24]
 800593c:	f000 f90a 	bl	8005b54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005940:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <pvPortMalloc+0x18c>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	4a1b      	ldr	r2, [pc, #108]	@ (80059b8 <pvPortMalloc+0x18c>)
 800594c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800594e:	4b1a      	ldr	r3, [pc, #104]	@ (80059b8 <pvPortMalloc+0x18c>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b1b      	ldr	r3, [pc, #108]	@ (80059c0 <pvPortMalloc+0x194>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d203      	bcs.n	8005962 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800595a:	4b17      	ldr	r3, [pc, #92]	@ (80059b8 <pvPortMalloc+0x18c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a18      	ldr	r2, [pc, #96]	@ (80059c0 <pvPortMalloc+0x194>)
 8005960:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	4b13      	ldr	r3, [pc, #76]	@ (80059b4 <pvPortMalloc+0x188>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	431a      	orrs	r2, r3
 800596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005976:	4b13      	ldr	r3, [pc, #76]	@ (80059c4 <pvPortMalloc+0x198>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	4a11      	ldr	r2, [pc, #68]	@ (80059c4 <pvPortMalloc+0x198>)
 800597e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005980:	f7fe fce2 	bl	8004348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <pvPortMalloc+0x17a>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60fb      	str	r3, [r7, #12]
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	e7fd      	b.n	80059a2 <pvPortMalloc+0x176>
	return pvReturn;
 80059a6:	69fb      	ldr	r3, [r7, #28]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3728      	adds	r7, #40	@ 0x28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20004b0c 	.word	0x20004b0c
 80059b4:	20004b20 	.word	0x20004b20
 80059b8:	20004b10 	.word	0x20004b10
 80059bc:	20004b04 	.word	0x20004b04
 80059c0:	20004b14 	.word	0x20004b14
 80059c4:	20004b18 	.word	0x20004b18

080059c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d04f      	beq.n	8005a7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059da:	2308      	movs	r3, #8
 80059dc:	425b      	negs	r3, r3
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	4b25      	ldr	r3, [pc, #148]	@ (8005a84 <vPortFree+0xbc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <vPortFree+0x46>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60fb      	str	r3, [r7, #12]
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	e7fd      	b.n	8005a0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <vPortFree+0x66>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60bb      	str	r3, [r7, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	4b14      	ldr	r3, [pc, #80]	@ (8005a84 <vPortFree+0xbc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01e      	beq.n	8005a7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d11a      	bne.n	8005a7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	4b0e      	ldr	r3, [pc, #56]	@ (8005a84 <vPortFree+0xbc>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	401a      	ands	r2, r3
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a54:	f7fe fc6a 	bl	800432c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a88 <vPortFree+0xc0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4413      	add	r3, r2
 8005a62:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <vPortFree+0xc0>)
 8005a64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a66:	6938      	ldr	r0, [r7, #16]
 8005a68:	f000 f874 	bl	8005b54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <vPortFree+0xc4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	4a06      	ldr	r2, [pc, #24]	@ (8005a8c <vPortFree+0xc4>)
 8005a74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a76:	f7fe fc67 	bl	8004348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a7a:	bf00      	nop
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20004b20 	.word	0x20004b20
 8005a88:	20004b10 	.word	0x20004b10
 8005a8c:	20004b1c 	.word	0x20004b1c

08005a90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005a9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a9c:	4b27      	ldr	r3, [pc, #156]	@ (8005b3c <prvHeapInit+0xac>)
 8005a9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00c      	beq.n	8005ac4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3307      	adds	r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0307 	bic.w	r3, r3, #7
 8005ab6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b3c <prvHeapInit+0xac>)
 8005ac0:	4413      	add	r3, r2
 8005ac2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <prvHeapInit+0xb0>)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ace:	4b1c      	ldr	r3, [pc, #112]	@ (8005b40 <prvHeapInit+0xb0>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	4413      	add	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005adc:	2208      	movs	r2, #8
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0307 	bic.w	r3, r3, #7
 8005aea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a15      	ldr	r2, [pc, #84]	@ (8005b44 <prvHeapInit+0xb4>)
 8005af0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005af2:	4b14      	ldr	r3, [pc, #80]	@ (8005b44 <prvHeapInit+0xb4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005afa:	4b12      	ldr	r3, [pc, #72]	@ (8005b44 <prvHeapInit+0xb4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	1ad2      	subs	r2, r2, r3
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b10:	4b0c      	ldr	r3, [pc, #48]	@ (8005b44 <prvHeapInit+0xb4>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b48 <prvHeapInit+0xb8>)
 8005b1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4a09      	ldr	r2, [pc, #36]	@ (8005b4c <prvHeapInit+0xbc>)
 8005b26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b28:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <prvHeapInit+0xc0>)
 8005b2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005b2e:	601a      	str	r2, [r3, #0]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000f04 	.word	0x20000f04
 8005b40:	20004b04 	.word	0x20004b04
 8005b44:	20004b0c 	.word	0x20004b0c
 8005b48:	20004b14 	.word	0x20004b14
 8005b4c:	20004b10 	.word	0x20004b10
 8005b50:	20004b20 	.word	0x20004b20

08005b54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b5c:	4b28      	ldr	r3, [pc, #160]	@ (8005c00 <prvInsertBlockIntoFreeList+0xac>)
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e002      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x14>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d8f7      	bhi.n	8005b62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d108      	bne.n	8005b96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	441a      	add	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	441a      	add	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d118      	bne.n	8005bdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4b15      	ldr	r3, [pc, #84]	@ (8005c04 <prvInsertBlockIntoFreeList+0xb0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d00d      	beq.n	8005bd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	441a      	add	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	e008      	b.n	8005be4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <prvInsertBlockIntoFreeList+0xb0>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	e003      	b.n	8005be4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d002      	beq.n	8005bf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20004b04 	.word	0x20004b04
 8005c04:	20004b0c 	.word	0x20004b0c

08005c08 <atoi>:
 8005c08:	220a      	movs	r2, #10
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	f000 b91e 	b.w	8005e4c <strtol>

08005c10 <std>:
 8005c10:	2300      	movs	r3, #0
 8005c12:	b510      	push	{r4, lr}
 8005c14:	4604      	mov	r4, r0
 8005c16:	e9c0 3300 	strd	r3, r3, [r0]
 8005c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c1e:	6083      	str	r3, [r0, #8]
 8005c20:	8181      	strh	r1, [r0, #12]
 8005c22:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c24:	81c2      	strh	r2, [r0, #14]
 8005c26:	6183      	str	r3, [r0, #24]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	305c      	adds	r0, #92	@ 0x5c
 8005c2e:	f000 f9b7 	bl	8005fa0 <memset>
 8005c32:	4b0d      	ldr	r3, [pc, #52]	@ (8005c68 <std+0x58>)
 8005c34:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c36:	4b0d      	ldr	r3, [pc, #52]	@ (8005c6c <std+0x5c>)
 8005c38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <std+0x60>)
 8005c3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <std+0x64>)
 8005c40:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <std+0x68>)
 8005c44:	6224      	str	r4, [r4, #32]
 8005c46:	429c      	cmp	r4, r3
 8005c48:	d006      	beq.n	8005c58 <std+0x48>
 8005c4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c4e:	4294      	cmp	r4, r2
 8005c50:	d002      	beq.n	8005c58 <std+0x48>
 8005c52:	33d0      	adds	r3, #208	@ 0xd0
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d105      	bne.n	8005c64 <std+0x54>
 8005c58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c60:	f000 ba26 	b.w	80060b0 <__retarget_lock_init_recursive>
 8005c64:	bd10      	pop	{r4, pc}
 8005c66:	bf00      	nop
 8005c68:	080069bd 	.word	0x080069bd
 8005c6c:	080069df 	.word	0x080069df
 8005c70:	08006a17 	.word	0x08006a17
 8005c74:	08006a3b 	.word	0x08006a3b
 8005c78:	20004b24 	.word	0x20004b24

08005c7c <stdio_exit_handler>:
 8005c7c:	4a02      	ldr	r2, [pc, #8]	@ (8005c88 <stdio_exit_handler+0xc>)
 8005c7e:	4903      	ldr	r1, [pc, #12]	@ (8005c8c <stdio_exit_handler+0x10>)
 8005c80:	4803      	ldr	r0, [pc, #12]	@ (8005c90 <stdio_exit_handler+0x14>)
 8005c82:	f000 b8ed 	b.w	8005e60 <_fwalk_sglue>
 8005c86:	bf00      	nop
 8005c88:	20000014 	.word	0x20000014
 8005c8c:	08006955 	.word	0x08006955
 8005c90:	20000024 	.word	0x20000024

08005c94 <cleanup_stdio>:
 8005c94:	6841      	ldr	r1, [r0, #4]
 8005c96:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <cleanup_stdio+0x34>)
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	d001      	beq.n	8005ca4 <cleanup_stdio+0x10>
 8005ca0:	f000 fe58 	bl	8006954 <_fflush_r>
 8005ca4:	68a1      	ldr	r1, [r4, #8]
 8005ca6:	4b09      	ldr	r3, [pc, #36]	@ (8005ccc <cleanup_stdio+0x38>)
 8005ca8:	4299      	cmp	r1, r3
 8005caa:	d002      	beq.n	8005cb2 <cleanup_stdio+0x1e>
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fe51 	bl	8006954 <_fflush_r>
 8005cb2:	68e1      	ldr	r1, [r4, #12]
 8005cb4:	4b06      	ldr	r3, [pc, #24]	@ (8005cd0 <cleanup_stdio+0x3c>)
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	d004      	beq.n	8005cc4 <cleanup_stdio+0x30>
 8005cba:	4620      	mov	r0, r4
 8005cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc0:	f000 be48 	b.w	8006954 <_fflush_r>
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20004b24 	.word	0x20004b24
 8005ccc:	20004b8c 	.word	0x20004b8c
 8005cd0:	20004bf4 	.word	0x20004bf4

08005cd4 <global_stdio_init.part.0>:
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <global_stdio_init.part.0+0x30>)
 8005cd8:	4c0b      	ldr	r4, [pc, #44]	@ (8005d08 <global_stdio_init.part.0+0x34>)
 8005cda:	4a0c      	ldr	r2, [pc, #48]	@ (8005d0c <global_stdio_init.part.0+0x38>)
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2104      	movs	r1, #4
 8005ce4:	f7ff ff94 	bl	8005c10 <std>
 8005ce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cec:	2201      	movs	r2, #1
 8005cee:	2109      	movs	r1, #9
 8005cf0:	f7ff ff8e 	bl	8005c10 <std>
 8005cf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cfe:	2112      	movs	r1, #18
 8005d00:	f7ff bf86 	b.w	8005c10 <std>
 8005d04:	20004c5c 	.word	0x20004c5c
 8005d08:	20004b24 	.word	0x20004b24
 8005d0c:	08005c7d 	.word	0x08005c7d

08005d10 <__sfp_lock_acquire>:
 8005d10:	4801      	ldr	r0, [pc, #4]	@ (8005d18 <__sfp_lock_acquire+0x8>)
 8005d12:	f000 b9ce 	b.w	80060b2 <__retarget_lock_acquire_recursive>
 8005d16:	bf00      	nop
 8005d18:	20004c65 	.word	0x20004c65

08005d1c <__sfp_lock_release>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	@ (8005d24 <__sfp_lock_release+0x8>)
 8005d1e:	f000 b9c9 	b.w	80060b4 <__retarget_lock_release_recursive>
 8005d22:	bf00      	nop
 8005d24:	20004c65 	.word	0x20004c65

08005d28 <__sinit>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	f7ff fff0 	bl	8005d10 <__sfp_lock_acquire>
 8005d30:	6a23      	ldr	r3, [r4, #32]
 8005d32:	b11b      	cbz	r3, 8005d3c <__sinit+0x14>
 8005d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d38:	f7ff bff0 	b.w	8005d1c <__sfp_lock_release>
 8005d3c:	4b04      	ldr	r3, [pc, #16]	@ (8005d50 <__sinit+0x28>)
 8005d3e:	6223      	str	r3, [r4, #32]
 8005d40:	4b04      	ldr	r3, [pc, #16]	@ (8005d54 <__sinit+0x2c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f5      	bne.n	8005d34 <__sinit+0xc>
 8005d48:	f7ff ffc4 	bl	8005cd4 <global_stdio_init.part.0>
 8005d4c:	e7f2      	b.n	8005d34 <__sinit+0xc>
 8005d4e:	bf00      	nop
 8005d50:	08005c95 	.word	0x08005c95
 8005d54:	20004c5c 	.word	0x20004c5c

08005d58 <_strtol_l.constprop.0>:
 8005d58:	2b24      	cmp	r3, #36	@ 0x24
 8005d5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5e:	4686      	mov	lr, r0
 8005d60:	4690      	mov	r8, r2
 8005d62:	d801      	bhi.n	8005d68 <_strtol_l.constprop.0+0x10>
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d106      	bne.n	8005d76 <_strtol_l.constprop.0+0x1e>
 8005d68:	f000 f978 	bl	800605c <__errno>
 8005d6c:	2316      	movs	r3, #22
 8005d6e:	6003      	str	r3, [r0, #0]
 8005d70:	2000      	movs	r0, #0
 8005d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d76:	4834      	ldr	r0, [pc, #208]	@ (8005e48 <_strtol_l.constprop.0+0xf0>)
 8005d78:	460d      	mov	r5, r1
 8005d7a:	462a      	mov	r2, r5
 8005d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d80:	5d06      	ldrb	r6, [r0, r4]
 8005d82:	f016 0608 	ands.w	r6, r6, #8
 8005d86:	d1f8      	bne.n	8005d7a <_strtol_l.constprop.0+0x22>
 8005d88:	2c2d      	cmp	r4, #45	@ 0x2d
 8005d8a:	d12d      	bne.n	8005de8 <_strtol_l.constprop.0+0x90>
 8005d8c:	782c      	ldrb	r4, [r5, #0]
 8005d8e:	2601      	movs	r6, #1
 8005d90:	1c95      	adds	r5, r2, #2
 8005d92:	f033 0210 	bics.w	r2, r3, #16
 8005d96:	d109      	bne.n	8005dac <_strtol_l.constprop.0+0x54>
 8005d98:	2c30      	cmp	r4, #48	@ 0x30
 8005d9a:	d12a      	bne.n	8005df2 <_strtol_l.constprop.0+0x9a>
 8005d9c:	782a      	ldrb	r2, [r5, #0]
 8005d9e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005da2:	2a58      	cmp	r2, #88	@ 0x58
 8005da4:	d125      	bne.n	8005df2 <_strtol_l.constprop.0+0x9a>
 8005da6:	786c      	ldrb	r4, [r5, #1]
 8005da8:	2310      	movs	r3, #16
 8005daa:	3502      	adds	r5, #2
 8005dac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005db0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005db4:	2200      	movs	r2, #0
 8005db6:	fbbc f9f3 	udiv	r9, ip, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	fb03 ca19 	mls	sl, r3, r9, ip
 8005dc0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005dc4:	2f09      	cmp	r7, #9
 8005dc6:	d81b      	bhi.n	8005e00 <_strtol_l.constprop.0+0xa8>
 8005dc8:	463c      	mov	r4, r7
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	dd27      	ble.n	8005e1e <_strtol_l.constprop.0+0xc6>
 8005dce:	1c57      	adds	r7, r2, #1
 8005dd0:	d007      	beq.n	8005de2 <_strtol_l.constprop.0+0x8a>
 8005dd2:	4581      	cmp	r9, r0
 8005dd4:	d320      	bcc.n	8005e18 <_strtol_l.constprop.0+0xc0>
 8005dd6:	d101      	bne.n	8005ddc <_strtol_l.constprop.0+0x84>
 8005dd8:	45a2      	cmp	sl, r4
 8005dda:	db1d      	blt.n	8005e18 <_strtol_l.constprop.0+0xc0>
 8005ddc:	fb00 4003 	mla	r0, r0, r3, r4
 8005de0:	2201      	movs	r2, #1
 8005de2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005de6:	e7eb      	b.n	8005dc0 <_strtol_l.constprop.0+0x68>
 8005de8:	2c2b      	cmp	r4, #43	@ 0x2b
 8005dea:	bf04      	itt	eq
 8005dec:	782c      	ldrbeq	r4, [r5, #0]
 8005dee:	1c95      	addeq	r5, r2, #2
 8005df0:	e7cf      	b.n	8005d92 <_strtol_l.constprop.0+0x3a>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1da      	bne.n	8005dac <_strtol_l.constprop.0+0x54>
 8005df6:	2c30      	cmp	r4, #48	@ 0x30
 8005df8:	bf0c      	ite	eq
 8005dfa:	2308      	moveq	r3, #8
 8005dfc:	230a      	movne	r3, #10
 8005dfe:	e7d5      	b.n	8005dac <_strtol_l.constprop.0+0x54>
 8005e00:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005e04:	2f19      	cmp	r7, #25
 8005e06:	d801      	bhi.n	8005e0c <_strtol_l.constprop.0+0xb4>
 8005e08:	3c37      	subs	r4, #55	@ 0x37
 8005e0a:	e7de      	b.n	8005dca <_strtol_l.constprop.0+0x72>
 8005e0c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005e10:	2f19      	cmp	r7, #25
 8005e12:	d804      	bhi.n	8005e1e <_strtol_l.constprop.0+0xc6>
 8005e14:	3c57      	subs	r4, #87	@ 0x57
 8005e16:	e7d8      	b.n	8005dca <_strtol_l.constprop.0+0x72>
 8005e18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e1c:	e7e1      	b.n	8005de2 <_strtol_l.constprop.0+0x8a>
 8005e1e:	1c53      	adds	r3, r2, #1
 8005e20:	d108      	bne.n	8005e34 <_strtol_l.constprop.0+0xdc>
 8005e22:	2322      	movs	r3, #34	@ 0x22
 8005e24:	f8ce 3000 	str.w	r3, [lr]
 8005e28:	4660      	mov	r0, ip
 8005e2a:	f1b8 0f00 	cmp.w	r8, #0
 8005e2e:	d0a0      	beq.n	8005d72 <_strtol_l.constprop.0+0x1a>
 8005e30:	1e69      	subs	r1, r5, #1
 8005e32:	e006      	b.n	8005e42 <_strtol_l.constprop.0+0xea>
 8005e34:	b106      	cbz	r6, 8005e38 <_strtol_l.constprop.0+0xe0>
 8005e36:	4240      	negs	r0, r0
 8005e38:	f1b8 0f00 	cmp.w	r8, #0
 8005e3c:	d099      	beq.n	8005d72 <_strtol_l.constprop.0+0x1a>
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	d1f6      	bne.n	8005e30 <_strtol_l.constprop.0+0xd8>
 8005e42:	f8c8 1000 	str.w	r1, [r8]
 8005e46:	e794      	b.n	8005d72 <_strtol_l.constprop.0+0x1a>
 8005e48:	08006ec5 	.word	0x08006ec5

08005e4c <strtol>:
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	460a      	mov	r2, r1
 8005e50:	4601      	mov	r1, r0
 8005e52:	4802      	ldr	r0, [pc, #8]	@ (8005e5c <strtol+0x10>)
 8005e54:	6800      	ldr	r0, [r0, #0]
 8005e56:	f7ff bf7f 	b.w	8005d58 <_strtol_l.constprop.0>
 8005e5a:	bf00      	nop
 8005e5c:	20000020 	.word	0x20000020

08005e60 <_fwalk_sglue>:
 8005e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e64:	4607      	mov	r7, r0
 8005e66:	4688      	mov	r8, r1
 8005e68:	4614      	mov	r4, r2
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e70:	f1b9 0901 	subs.w	r9, r9, #1
 8005e74:	d505      	bpl.n	8005e82 <_fwalk_sglue+0x22>
 8005e76:	6824      	ldr	r4, [r4, #0]
 8005e78:	2c00      	cmp	r4, #0
 8005e7a:	d1f7      	bne.n	8005e6c <_fwalk_sglue+0xc>
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d907      	bls.n	8005e98 <_fwalk_sglue+0x38>
 8005e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	d003      	beq.n	8005e98 <_fwalk_sglue+0x38>
 8005e90:	4629      	mov	r1, r5
 8005e92:	4638      	mov	r0, r7
 8005e94:	47c0      	blx	r8
 8005e96:	4306      	orrs	r6, r0
 8005e98:	3568      	adds	r5, #104	@ 0x68
 8005e9a:	e7e9      	b.n	8005e70 <_fwalk_sglue+0x10>

08005e9c <iprintf>:
 8005e9c:	b40f      	push	{r0, r1, r2, r3}
 8005e9e:	b507      	push	{r0, r1, r2, lr}
 8005ea0:	4906      	ldr	r1, [pc, #24]	@ (8005ebc <iprintf+0x20>)
 8005ea2:	ab04      	add	r3, sp, #16
 8005ea4:	6808      	ldr	r0, [r1, #0]
 8005ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eaa:	6881      	ldr	r1, [r0, #8]
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	f000 f985 	bl	80061bc <_vfiprintf_r>
 8005eb2:	b003      	add	sp, #12
 8005eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eb8:	b004      	add	sp, #16
 8005eba:	4770      	bx	lr
 8005ebc:	20000020 	.word	0x20000020

08005ec0 <_puts_r>:
 8005ec0:	6a03      	ldr	r3, [r0, #32]
 8005ec2:	b570      	push	{r4, r5, r6, lr}
 8005ec4:	6884      	ldr	r4, [r0, #8]
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	460e      	mov	r6, r1
 8005eca:	b90b      	cbnz	r3, 8005ed0 <_puts_r+0x10>
 8005ecc:	f7ff ff2c 	bl	8005d28 <__sinit>
 8005ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ed2:	07db      	lsls	r3, r3, #31
 8005ed4:	d405      	bmi.n	8005ee2 <_puts_r+0x22>
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	0598      	lsls	r0, r3, #22
 8005eda:	d402      	bmi.n	8005ee2 <_puts_r+0x22>
 8005edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ede:	f000 f8e8 	bl	80060b2 <__retarget_lock_acquire_recursive>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	0719      	lsls	r1, r3, #28
 8005ee6:	d502      	bpl.n	8005eee <_puts_r+0x2e>
 8005ee8:	6923      	ldr	r3, [r4, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d135      	bne.n	8005f5a <_puts_r+0x9a>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f000 fde5 	bl	8006ac0 <__swsetup_r>
 8005ef6:	b380      	cbz	r0, 8005f5a <_puts_r+0x9a>
 8005ef8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005efe:	07da      	lsls	r2, r3, #31
 8005f00:	d405      	bmi.n	8005f0e <_puts_r+0x4e>
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	059b      	lsls	r3, r3, #22
 8005f06:	d402      	bmi.n	8005f0e <_puts_r+0x4e>
 8005f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f0a:	f000 f8d3 	bl	80060b4 <__retarget_lock_release_recursive>
 8005f0e:	4628      	mov	r0, r5
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da04      	bge.n	8005f20 <_puts_r+0x60>
 8005f16:	69a2      	ldr	r2, [r4, #24]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	dc17      	bgt.n	8005f4c <_puts_r+0x8c>
 8005f1c:	290a      	cmp	r1, #10
 8005f1e:	d015      	beq.n	8005f4c <_puts_r+0x8c>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	6022      	str	r2, [r4, #0]
 8005f26:	7019      	strb	r1, [r3, #0]
 8005f28:	68a3      	ldr	r3, [r4, #8]
 8005f2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	60a3      	str	r3, [r4, #8]
 8005f32:	2900      	cmp	r1, #0
 8005f34:	d1ed      	bne.n	8005f12 <_puts_r+0x52>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	da11      	bge.n	8005f5e <_puts_r+0x9e>
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	210a      	movs	r1, #10
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 fd7f 	bl	8006a42 <__swbuf_r>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d0d7      	beq.n	8005ef8 <_puts_r+0x38>
 8005f48:	250a      	movs	r5, #10
 8005f4a:	e7d7      	b.n	8005efc <_puts_r+0x3c>
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 fd77 	bl	8006a42 <__swbuf_r>
 8005f54:	3001      	adds	r0, #1
 8005f56:	d1e7      	bne.n	8005f28 <_puts_r+0x68>
 8005f58:	e7ce      	b.n	8005ef8 <_puts_r+0x38>
 8005f5a:	3e01      	subs	r6, #1
 8005f5c:	e7e4      	b.n	8005f28 <_puts_r+0x68>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	6022      	str	r2, [r4, #0]
 8005f64:	220a      	movs	r2, #10
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	e7ee      	b.n	8005f48 <_puts_r+0x88>
	...

08005f6c <puts>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	@ (8005f78 <puts+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f7ff bfa5 	b.w	8005ec0 <_puts_r>
 8005f76:	bf00      	nop
 8005f78:	20000020 	.word	0x20000020

08005f7c <strncmp>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	b16a      	cbz	r2, 8005f9c <strncmp+0x20>
 8005f80:	3901      	subs	r1, #1
 8005f82:	1884      	adds	r4, r0, r2
 8005f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d103      	bne.n	8005f98 <strncmp+0x1c>
 8005f90:	42a0      	cmp	r0, r4
 8005f92:	d001      	beq.n	8005f98 <strncmp+0x1c>
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	d1f5      	bne.n	8005f84 <strncmp+0x8>
 8005f98:	1ad0      	subs	r0, r2, r3
 8005f9a:	bd10      	pop	{r4, pc}
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	e7fc      	b.n	8005f9a <strncmp+0x1e>

08005fa0 <memset>:
 8005fa0:	4402      	add	r2, r0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d100      	bne.n	8005faa <memset+0xa>
 8005fa8:	4770      	bx	lr
 8005faa:	f803 1b01 	strb.w	r1, [r3], #1
 8005fae:	e7f9      	b.n	8005fa4 <memset+0x4>

08005fb0 <_reclaim_reent>:
 8005fb0:	4b29      	ldr	r3, [pc, #164]	@ (8006058 <_reclaim_reent+0xa8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4283      	cmp	r3, r0
 8005fb6:	b570      	push	{r4, r5, r6, lr}
 8005fb8:	4604      	mov	r4, r0
 8005fba:	d04b      	beq.n	8006054 <_reclaim_reent+0xa4>
 8005fbc:	69c3      	ldr	r3, [r0, #28]
 8005fbe:	b1ab      	cbz	r3, 8005fec <_reclaim_reent+0x3c>
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	b16b      	cbz	r3, 8005fe0 <_reclaim_reent+0x30>
 8005fc4:	2500      	movs	r5, #0
 8005fc6:	69e3      	ldr	r3, [r4, #28]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	5959      	ldr	r1, [r3, r5]
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	d13b      	bne.n	8006048 <_reclaim_reent+0x98>
 8005fd0:	3504      	adds	r5, #4
 8005fd2:	2d80      	cmp	r5, #128	@ 0x80
 8005fd4:	d1f7      	bne.n	8005fc6 <_reclaim_reent+0x16>
 8005fd6:	69e3      	ldr	r3, [r4, #28]
 8005fd8:	4620      	mov	r0, r4
 8005fda:	68d9      	ldr	r1, [r3, #12]
 8005fdc:	f000 f87a 	bl	80060d4 <_free_r>
 8005fe0:	69e3      	ldr	r3, [r4, #28]
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	b111      	cbz	r1, 8005fec <_reclaim_reent+0x3c>
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 f874 	bl	80060d4 <_free_r>
 8005fec:	6961      	ldr	r1, [r4, #20]
 8005fee:	b111      	cbz	r1, 8005ff6 <_reclaim_reent+0x46>
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 f86f 	bl	80060d4 <_free_r>
 8005ff6:	69e1      	ldr	r1, [r4, #28]
 8005ff8:	b111      	cbz	r1, 8006000 <_reclaim_reent+0x50>
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 f86a 	bl	80060d4 <_free_r>
 8006000:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006002:	b111      	cbz	r1, 800600a <_reclaim_reent+0x5a>
 8006004:	4620      	mov	r0, r4
 8006006:	f000 f865 	bl	80060d4 <_free_r>
 800600a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800600c:	b111      	cbz	r1, 8006014 <_reclaim_reent+0x64>
 800600e:	4620      	mov	r0, r4
 8006010:	f000 f860 	bl	80060d4 <_free_r>
 8006014:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006016:	b111      	cbz	r1, 800601e <_reclaim_reent+0x6e>
 8006018:	4620      	mov	r0, r4
 800601a:	f000 f85b 	bl	80060d4 <_free_r>
 800601e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006020:	b111      	cbz	r1, 8006028 <_reclaim_reent+0x78>
 8006022:	4620      	mov	r0, r4
 8006024:	f000 f856 	bl	80060d4 <_free_r>
 8006028:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800602a:	b111      	cbz	r1, 8006032 <_reclaim_reent+0x82>
 800602c:	4620      	mov	r0, r4
 800602e:	f000 f851 	bl	80060d4 <_free_r>
 8006032:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006034:	b111      	cbz	r1, 800603c <_reclaim_reent+0x8c>
 8006036:	4620      	mov	r0, r4
 8006038:	f000 f84c 	bl	80060d4 <_free_r>
 800603c:	6a23      	ldr	r3, [r4, #32]
 800603e:	b14b      	cbz	r3, 8006054 <_reclaim_reent+0xa4>
 8006040:	4620      	mov	r0, r4
 8006042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006046:	4718      	bx	r3
 8006048:	680e      	ldr	r6, [r1, #0]
 800604a:	4620      	mov	r0, r4
 800604c:	f000 f842 	bl	80060d4 <_free_r>
 8006050:	4631      	mov	r1, r6
 8006052:	e7bb      	b.n	8005fcc <_reclaim_reent+0x1c>
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	bf00      	nop
 8006058:	20000020 	.word	0x20000020

0800605c <__errno>:
 800605c:	4b01      	ldr	r3, [pc, #4]	@ (8006064 <__errno+0x8>)
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000020 	.word	0x20000020

08006068 <__libc_init_array>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4d0d      	ldr	r5, [pc, #52]	@ (80060a0 <__libc_init_array+0x38>)
 800606c:	4c0d      	ldr	r4, [pc, #52]	@ (80060a4 <__libc_init_array+0x3c>)
 800606e:	1b64      	subs	r4, r4, r5
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	2600      	movs	r6, #0
 8006074:	42a6      	cmp	r6, r4
 8006076:	d109      	bne.n	800608c <__libc_init_array+0x24>
 8006078:	4d0b      	ldr	r5, [pc, #44]	@ (80060a8 <__libc_init_array+0x40>)
 800607a:	4c0c      	ldr	r4, [pc, #48]	@ (80060ac <__libc_init_array+0x44>)
 800607c:	f000 fe50 	bl	8006d20 <_init>
 8006080:	1b64      	subs	r4, r4, r5
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	2600      	movs	r6, #0
 8006086:	42a6      	cmp	r6, r4
 8006088:	d105      	bne.n	8006096 <__libc_init_array+0x2e>
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006090:	4798      	blx	r3
 8006092:	3601      	adds	r6, #1
 8006094:	e7ee      	b.n	8006074 <__libc_init_array+0xc>
 8006096:	f855 3b04 	ldr.w	r3, [r5], #4
 800609a:	4798      	blx	r3
 800609c:	3601      	adds	r6, #1
 800609e:	e7f2      	b.n	8006086 <__libc_init_array+0x1e>
 80060a0:	08007000 	.word	0x08007000
 80060a4:	08007000 	.word	0x08007000
 80060a8:	08007000 	.word	0x08007000
 80060ac:	08007004 	.word	0x08007004

080060b0 <__retarget_lock_init_recursive>:
 80060b0:	4770      	bx	lr

080060b2 <__retarget_lock_acquire_recursive>:
 80060b2:	4770      	bx	lr

080060b4 <__retarget_lock_release_recursive>:
 80060b4:	4770      	bx	lr

080060b6 <memcpy>:
 80060b6:	440a      	add	r2, r1
 80060b8:	4291      	cmp	r1, r2
 80060ba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80060be:	d100      	bne.n	80060c2 <memcpy+0xc>
 80060c0:	4770      	bx	lr
 80060c2:	b510      	push	{r4, lr}
 80060c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060cc:	4291      	cmp	r1, r2
 80060ce:	d1f9      	bne.n	80060c4 <memcpy+0xe>
 80060d0:	bd10      	pop	{r4, pc}
	...

080060d4 <_free_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4605      	mov	r5, r0
 80060d8:	2900      	cmp	r1, #0
 80060da:	d041      	beq.n	8006160 <_free_r+0x8c>
 80060dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060e0:	1f0c      	subs	r4, r1, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bfb8      	it	lt
 80060e6:	18e4      	addlt	r4, r4, r3
 80060e8:	f000 fc5c 	bl	80069a4 <__malloc_lock>
 80060ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006164 <_free_r+0x90>)
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	b933      	cbnz	r3, 8006100 <_free_r+0x2c>
 80060f2:	6063      	str	r3, [r4, #4]
 80060f4:	6014      	str	r4, [r2, #0]
 80060f6:	4628      	mov	r0, r5
 80060f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060fc:	f000 bc58 	b.w	80069b0 <__malloc_unlock>
 8006100:	42a3      	cmp	r3, r4
 8006102:	d908      	bls.n	8006116 <_free_r+0x42>
 8006104:	6820      	ldr	r0, [r4, #0]
 8006106:	1821      	adds	r1, r4, r0
 8006108:	428b      	cmp	r3, r1
 800610a:	bf01      	itttt	eq
 800610c:	6819      	ldreq	r1, [r3, #0]
 800610e:	685b      	ldreq	r3, [r3, #4]
 8006110:	1809      	addeq	r1, r1, r0
 8006112:	6021      	streq	r1, [r4, #0]
 8006114:	e7ed      	b.n	80060f2 <_free_r+0x1e>
 8006116:	461a      	mov	r2, r3
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b10b      	cbz	r3, 8006120 <_free_r+0x4c>
 800611c:	42a3      	cmp	r3, r4
 800611e:	d9fa      	bls.n	8006116 <_free_r+0x42>
 8006120:	6811      	ldr	r1, [r2, #0]
 8006122:	1850      	adds	r0, r2, r1
 8006124:	42a0      	cmp	r0, r4
 8006126:	d10b      	bne.n	8006140 <_free_r+0x6c>
 8006128:	6820      	ldr	r0, [r4, #0]
 800612a:	4401      	add	r1, r0
 800612c:	1850      	adds	r0, r2, r1
 800612e:	4283      	cmp	r3, r0
 8006130:	6011      	str	r1, [r2, #0]
 8006132:	d1e0      	bne.n	80060f6 <_free_r+0x22>
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	6053      	str	r3, [r2, #4]
 800613a:	4408      	add	r0, r1
 800613c:	6010      	str	r0, [r2, #0]
 800613e:	e7da      	b.n	80060f6 <_free_r+0x22>
 8006140:	d902      	bls.n	8006148 <_free_r+0x74>
 8006142:	230c      	movs	r3, #12
 8006144:	602b      	str	r3, [r5, #0]
 8006146:	e7d6      	b.n	80060f6 <_free_r+0x22>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	1821      	adds	r1, r4, r0
 800614c:	428b      	cmp	r3, r1
 800614e:	bf04      	itt	eq
 8006150:	6819      	ldreq	r1, [r3, #0]
 8006152:	685b      	ldreq	r3, [r3, #4]
 8006154:	6063      	str	r3, [r4, #4]
 8006156:	bf04      	itt	eq
 8006158:	1809      	addeq	r1, r1, r0
 800615a:	6021      	streq	r1, [r4, #0]
 800615c:	6054      	str	r4, [r2, #4]
 800615e:	e7ca      	b.n	80060f6 <_free_r+0x22>
 8006160:	bd38      	pop	{r3, r4, r5, pc}
 8006162:	bf00      	nop
 8006164:	20004c6c 	.word	0x20004c6c

08006168 <__sfputc_r>:
 8006168:	6893      	ldr	r3, [r2, #8]
 800616a:	3b01      	subs	r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	b410      	push	{r4}
 8006170:	6093      	str	r3, [r2, #8]
 8006172:	da08      	bge.n	8006186 <__sfputc_r+0x1e>
 8006174:	6994      	ldr	r4, [r2, #24]
 8006176:	42a3      	cmp	r3, r4
 8006178:	db01      	blt.n	800617e <__sfputc_r+0x16>
 800617a:	290a      	cmp	r1, #10
 800617c:	d103      	bne.n	8006186 <__sfputc_r+0x1e>
 800617e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006182:	f000 bc5e 	b.w	8006a42 <__swbuf_r>
 8006186:	6813      	ldr	r3, [r2, #0]
 8006188:	1c58      	adds	r0, r3, #1
 800618a:	6010      	str	r0, [r2, #0]
 800618c:	7019      	strb	r1, [r3, #0]
 800618e:	4608      	mov	r0, r1
 8006190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006194:	4770      	bx	lr

08006196 <__sfputs_r>:
 8006196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006198:	4606      	mov	r6, r0
 800619a:	460f      	mov	r7, r1
 800619c:	4614      	mov	r4, r2
 800619e:	18d5      	adds	r5, r2, r3
 80061a0:	42ac      	cmp	r4, r5
 80061a2:	d101      	bne.n	80061a8 <__sfputs_r+0x12>
 80061a4:	2000      	movs	r0, #0
 80061a6:	e007      	b.n	80061b8 <__sfputs_r+0x22>
 80061a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ac:	463a      	mov	r2, r7
 80061ae:	4630      	mov	r0, r6
 80061b0:	f7ff ffda 	bl	8006168 <__sfputc_r>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d1f3      	bne.n	80061a0 <__sfputs_r+0xa>
 80061b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061bc <_vfiprintf_r>:
 80061bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	460d      	mov	r5, r1
 80061c2:	b09d      	sub	sp, #116	@ 0x74
 80061c4:	4614      	mov	r4, r2
 80061c6:	4698      	mov	r8, r3
 80061c8:	4606      	mov	r6, r0
 80061ca:	b118      	cbz	r0, 80061d4 <_vfiprintf_r+0x18>
 80061cc:	6a03      	ldr	r3, [r0, #32]
 80061ce:	b90b      	cbnz	r3, 80061d4 <_vfiprintf_r+0x18>
 80061d0:	f7ff fdaa 	bl	8005d28 <__sinit>
 80061d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061d6:	07d9      	lsls	r1, r3, #31
 80061d8:	d405      	bmi.n	80061e6 <_vfiprintf_r+0x2a>
 80061da:	89ab      	ldrh	r3, [r5, #12]
 80061dc:	059a      	lsls	r2, r3, #22
 80061de:	d402      	bmi.n	80061e6 <_vfiprintf_r+0x2a>
 80061e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061e2:	f7ff ff66 	bl	80060b2 <__retarget_lock_acquire_recursive>
 80061e6:	89ab      	ldrh	r3, [r5, #12]
 80061e8:	071b      	lsls	r3, r3, #28
 80061ea:	d501      	bpl.n	80061f0 <_vfiprintf_r+0x34>
 80061ec:	692b      	ldr	r3, [r5, #16]
 80061ee:	b99b      	cbnz	r3, 8006218 <_vfiprintf_r+0x5c>
 80061f0:	4629      	mov	r1, r5
 80061f2:	4630      	mov	r0, r6
 80061f4:	f000 fc64 	bl	8006ac0 <__swsetup_r>
 80061f8:	b170      	cbz	r0, 8006218 <_vfiprintf_r+0x5c>
 80061fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061fc:	07dc      	lsls	r4, r3, #31
 80061fe:	d504      	bpl.n	800620a <_vfiprintf_r+0x4e>
 8006200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006204:	b01d      	add	sp, #116	@ 0x74
 8006206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620a:	89ab      	ldrh	r3, [r5, #12]
 800620c:	0598      	lsls	r0, r3, #22
 800620e:	d4f7      	bmi.n	8006200 <_vfiprintf_r+0x44>
 8006210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006212:	f7ff ff4f 	bl	80060b4 <__retarget_lock_release_recursive>
 8006216:	e7f3      	b.n	8006200 <_vfiprintf_r+0x44>
 8006218:	2300      	movs	r3, #0
 800621a:	9309      	str	r3, [sp, #36]	@ 0x24
 800621c:	2320      	movs	r3, #32
 800621e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006222:	f8cd 800c 	str.w	r8, [sp, #12]
 8006226:	2330      	movs	r3, #48	@ 0x30
 8006228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80063d8 <_vfiprintf_r+0x21c>
 800622c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006230:	f04f 0901 	mov.w	r9, #1
 8006234:	4623      	mov	r3, r4
 8006236:	469a      	mov	sl, r3
 8006238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800623c:	b10a      	cbz	r2, 8006242 <_vfiprintf_r+0x86>
 800623e:	2a25      	cmp	r2, #37	@ 0x25
 8006240:	d1f9      	bne.n	8006236 <_vfiprintf_r+0x7a>
 8006242:	ebba 0b04 	subs.w	fp, sl, r4
 8006246:	d00b      	beq.n	8006260 <_vfiprintf_r+0xa4>
 8006248:	465b      	mov	r3, fp
 800624a:	4622      	mov	r2, r4
 800624c:	4629      	mov	r1, r5
 800624e:	4630      	mov	r0, r6
 8006250:	f7ff ffa1 	bl	8006196 <__sfputs_r>
 8006254:	3001      	adds	r0, #1
 8006256:	f000 80a7 	beq.w	80063a8 <_vfiprintf_r+0x1ec>
 800625a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800625c:	445a      	add	r2, fp
 800625e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006260:	f89a 3000 	ldrb.w	r3, [sl]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 809f 	beq.w	80063a8 <_vfiprintf_r+0x1ec>
 800626a:	2300      	movs	r3, #0
 800626c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006274:	f10a 0a01 	add.w	sl, sl, #1
 8006278:	9304      	str	r3, [sp, #16]
 800627a:	9307      	str	r3, [sp, #28]
 800627c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006280:	931a      	str	r3, [sp, #104]	@ 0x68
 8006282:	4654      	mov	r4, sl
 8006284:	2205      	movs	r2, #5
 8006286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628a:	4853      	ldr	r0, [pc, #332]	@ (80063d8 <_vfiprintf_r+0x21c>)
 800628c:	f7f9 ffa0 	bl	80001d0 <memchr>
 8006290:	9a04      	ldr	r2, [sp, #16]
 8006292:	b9d8      	cbnz	r0, 80062cc <_vfiprintf_r+0x110>
 8006294:	06d1      	lsls	r1, r2, #27
 8006296:	bf44      	itt	mi
 8006298:	2320      	movmi	r3, #32
 800629a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800629e:	0713      	lsls	r3, r2, #28
 80062a0:	bf44      	itt	mi
 80062a2:	232b      	movmi	r3, #43	@ 0x2b
 80062a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062a8:	f89a 3000 	ldrb.w	r3, [sl]
 80062ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80062ae:	d015      	beq.n	80062dc <_vfiprintf_r+0x120>
 80062b0:	9a07      	ldr	r2, [sp, #28]
 80062b2:	4654      	mov	r4, sl
 80062b4:	2000      	movs	r0, #0
 80062b6:	f04f 0c0a 	mov.w	ip, #10
 80062ba:	4621      	mov	r1, r4
 80062bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062c0:	3b30      	subs	r3, #48	@ 0x30
 80062c2:	2b09      	cmp	r3, #9
 80062c4:	d94b      	bls.n	800635e <_vfiprintf_r+0x1a2>
 80062c6:	b1b0      	cbz	r0, 80062f6 <_vfiprintf_r+0x13a>
 80062c8:	9207      	str	r2, [sp, #28]
 80062ca:	e014      	b.n	80062f6 <_vfiprintf_r+0x13a>
 80062cc:	eba0 0308 	sub.w	r3, r0, r8
 80062d0:	fa09 f303 	lsl.w	r3, r9, r3
 80062d4:	4313      	orrs	r3, r2
 80062d6:	9304      	str	r3, [sp, #16]
 80062d8:	46a2      	mov	sl, r4
 80062da:	e7d2      	b.n	8006282 <_vfiprintf_r+0xc6>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	1d19      	adds	r1, r3, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	9103      	str	r1, [sp, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bfbb      	ittet	lt
 80062e8:	425b      	neglt	r3, r3
 80062ea:	f042 0202 	orrlt.w	r2, r2, #2
 80062ee:	9307      	strge	r3, [sp, #28]
 80062f0:	9307      	strlt	r3, [sp, #28]
 80062f2:	bfb8      	it	lt
 80062f4:	9204      	strlt	r2, [sp, #16]
 80062f6:	7823      	ldrb	r3, [r4, #0]
 80062f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80062fa:	d10a      	bne.n	8006312 <_vfiprintf_r+0x156>
 80062fc:	7863      	ldrb	r3, [r4, #1]
 80062fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006300:	d132      	bne.n	8006368 <_vfiprintf_r+0x1ac>
 8006302:	9b03      	ldr	r3, [sp, #12]
 8006304:	1d1a      	adds	r2, r3, #4
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	9203      	str	r2, [sp, #12]
 800630a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800630e:	3402      	adds	r4, #2
 8006310:	9305      	str	r3, [sp, #20]
 8006312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063e8 <_vfiprintf_r+0x22c>
 8006316:	7821      	ldrb	r1, [r4, #0]
 8006318:	2203      	movs	r2, #3
 800631a:	4650      	mov	r0, sl
 800631c:	f7f9 ff58 	bl	80001d0 <memchr>
 8006320:	b138      	cbz	r0, 8006332 <_vfiprintf_r+0x176>
 8006322:	9b04      	ldr	r3, [sp, #16]
 8006324:	eba0 000a 	sub.w	r0, r0, sl
 8006328:	2240      	movs	r2, #64	@ 0x40
 800632a:	4082      	lsls	r2, r0
 800632c:	4313      	orrs	r3, r2
 800632e:	3401      	adds	r4, #1
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006336:	4829      	ldr	r0, [pc, #164]	@ (80063dc <_vfiprintf_r+0x220>)
 8006338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800633c:	2206      	movs	r2, #6
 800633e:	f7f9 ff47 	bl	80001d0 <memchr>
 8006342:	2800      	cmp	r0, #0
 8006344:	d03f      	beq.n	80063c6 <_vfiprintf_r+0x20a>
 8006346:	4b26      	ldr	r3, [pc, #152]	@ (80063e0 <_vfiprintf_r+0x224>)
 8006348:	bb1b      	cbnz	r3, 8006392 <_vfiprintf_r+0x1d6>
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	3307      	adds	r3, #7
 800634e:	f023 0307 	bic.w	r3, r3, #7
 8006352:	3308      	adds	r3, #8
 8006354:	9303      	str	r3, [sp, #12]
 8006356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006358:	443b      	add	r3, r7
 800635a:	9309      	str	r3, [sp, #36]	@ 0x24
 800635c:	e76a      	b.n	8006234 <_vfiprintf_r+0x78>
 800635e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006362:	460c      	mov	r4, r1
 8006364:	2001      	movs	r0, #1
 8006366:	e7a8      	b.n	80062ba <_vfiprintf_r+0xfe>
 8006368:	2300      	movs	r3, #0
 800636a:	3401      	adds	r4, #1
 800636c:	9305      	str	r3, [sp, #20]
 800636e:	4619      	mov	r1, r3
 8006370:	f04f 0c0a 	mov.w	ip, #10
 8006374:	4620      	mov	r0, r4
 8006376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800637a:	3a30      	subs	r2, #48	@ 0x30
 800637c:	2a09      	cmp	r2, #9
 800637e:	d903      	bls.n	8006388 <_vfiprintf_r+0x1cc>
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0c6      	beq.n	8006312 <_vfiprintf_r+0x156>
 8006384:	9105      	str	r1, [sp, #20]
 8006386:	e7c4      	b.n	8006312 <_vfiprintf_r+0x156>
 8006388:	fb0c 2101 	mla	r1, ip, r1, r2
 800638c:	4604      	mov	r4, r0
 800638e:	2301      	movs	r3, #1
 8006390:	e7f0      	b.n	8006374 <_vfiprintf_r+0x1b8>
 8006392:	ab03      	add	r3, sp, #12
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	462a      	mov	r2, r5
 8006398:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <_vfiprintf_r+0x228>)
 800639a:	a904      	add	r1, sp, #16
 800639c:	4630      	mov	r0, r6
 800639e:	f3af 8000 	nop.w
 80063a2:	4607      	mov	r7, r0
 80063a4:	1c78      	adds	r0, r7, #1
 80063a6:	d1d6      	bne.n	8006356 <_vfiprintf_r+0x19a>
 80063a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063aa:	07d9      	lsls	r1, r3, #31
 80063ac:	d405      	bmi.n	80063ba <_vfiprintf_r+0x1fe>
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	059a      	lsls	r2, r3, #22
 80063b2:	d402      	bmi.n	80063ba <_vfiprintf_r+0x1fe>
 80063b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063b6:	f7ff fe7d 	bl	80060b4 <__retarget_lock_release_recursive>
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	065b      	lsls	r3, r3, #25
 80063be:	f53f af1f 	bmi.w	8006200 <_vfiprintf_r+0x44>
 80063c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063c4:	e71e      	b.n	8006204 <_vfiprintf_r+0x48>
 80063c6:	ab03      	add	r3, sp, #12
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	462a      	mov	r2, r5
 80063cc:	4b05      	ldr	r3, [pc, #20]	@ (80063e4 <_vfiprintf_r+0x228>)
 80063ce:	a904      	add	r1, sp, #16
 80063d0:	4630      	mov	r0, r6
 80063d2:	f000 f91b 	bl	800660c <_printf_i>
 80063d6:	e7e4      	b.n	80063a2 <_vfiprintf_r+0x1e6>
 80063d8:	08006fc5 	.word	0x08006fc5
 80063dc:	08006fcf 	.word	0x08006fcf
 80063e0:	00000000 	.word	0x00000000
 80063e4:	08006197 	.word	0x08006197
 80063e8:	08006fcb 	.word	0x08006fcb

080063ec <sbrk_aligned>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4e0f      	ldr	r6, [pc, #60]	@ (800642c <sbrk_aligned+0x40>)
 80063f0:	460c      	mov	r4, r1
 80063f2:	6831      	ldr	r1, [r6, #0]
 80063f4:	4605      	mov	r5, r0
 80063f6:	b911      	cbnz	r1, 80063fe <sbrk_aligned+0x12>
 80063f8:	f000 fc70 	bl	8006cdc <_sbrk_r>
 80063fc:	6030      	str	r0, [r6, #0]
 80063fe:	4621      	mov	r1, r4
 8006400:	4628      	mov	r0, r5
 8006402:	f000 fc6b 	bl	8006cdc <_sbrk_r>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d103      	bne.n	8006412 <sbrk_aligned+0x26>
 800640a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800640e:	4620      	mov	r0, r4
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	1cc4      	adds	r4, r0, #3
 8006414:	f024 0403 	bic.w	r4, r4, #3
 8006418:	42a0      	cmp	r0, r4
 800641a:	d0f8      	beq.n	800640e <sbrk_aligned+0x22>
 800641c:	1a21      	subs	r1, r4, r0
 800641e:	4628      	mov	r0, r5
 8006420:	f000 fc5c 	bl	8006cdc <_sbrk_r>
 8006424:	3001      	adds	r0, #1
 8006426:	d1f2      	bne.n	800640e <sbrk_aligned+0x22>
 8006428:	e7ef      	b.n	800640a <sbrk_aligned+0x1e>
 800642a:	bf00      	nop
 800642c:	20004c68 	.word	0x20004c68

08006430 <_malloc_r>:
 8006430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006434:	1ccd      	adds	r5, r1, #3
 8006436:	f025 0503 	bic.w	r5, r5, #3
 800643a:	3508      	adds	r5, #8
 800643c:	2d0c      	cmp	r5, #12
 800643e:	bf38      	it	cc
 8006440:	250c      	movcc	r5, #12
 8006442:	2d00      	cmp	r5, #0
 8006444:	4606      	mov	r6, r0
 8006446:	db01      	blt.n	800644c <_malloc_r+0x1c>
 8006448:	42a9      	cmp	r1, r5
 800644a:	d904      	bls.n	8006456 <_malloc_r+0x26>
 800644c:	230c      	movs	r3, #12
 800644e:	6033      	str	r3, [r6, #0]
 8006450:	2000      	movs	r0, #0
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800652c <_malloc_r+0xfc>
 800645a:	f000 faa3 	bl	80069a4 <__malloc_lock>
 800645e:	f8d8 3000 	ldr.w	r3, [r8]
 8006462:	461c      	mov	r4, r3
 8006464:	bb44      	cbnz	r4, 80064b8 <_malloc_r+0x88>
 8006466:	4629      	mov	r1, r5
 8006468:	4630      	mov	r0, r6
 800646a:	f7ff ffbf 	bl	80063ec <sbrk_aligned>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	4604      	mov	r4, r0
 8006472:	d158      	bne.n	8006526 <_malloc_r+0xf6>
 8006474:	f8d8 4000 	ldr.w	r4, [r8]
 8006478:	4627      	mov	r7, r4
 800647a:	2f00      	cmp	r7, #0
 800647c:	d143      	bne.n	8006506 <_malloc_r+0xd6>
 800647e:	2c00      	cmp	r4, #0
 8006480:	d04b      	beq.n	800651a <_malloc_r+0xea>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	4639      	mov	r1, r7
 8006486:	4630      	mov	r0, r6
 8006488:	eb04 0903 	add.w	r9, r4, r3
 800648c:	f000 fc26 	bl	8006cdc <_sbrk_r>
 8006490:	4581      	cmp	r9, r0
 8006492:	d142      	bne.n	800651a <_malloc_r+0xea>
 8006494:	6821      	ldr	r1, [r4, #0]
 8006496:	1a6d      	subs	r5, r5, r1
 8006498:	4629      	mov	r1, r5
 800649a:	4630      	mov	r0, r6
 800649c:	f7ff ffa6 	bl	80063ec <sbrk_aligned>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d03a      	beq.n	800651a <_malloc_r+0xea>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	442b      	add	r3, r5
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	f8d8 3000 	ldr.w	r3, [r8]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	bb62      	cbnz	r2, 800650c <_malloc_r+0xdc>
 80064b2:	f8c8 7000 	str.w	r7, [r8]
 80064b6:	e00f      	b.n	80064d8 <_malloc_r+0xa8>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	1b52      	subs	r2, r2, r5
 80064bc:	d420      	bmi.n	8006500 <_malloc_r+0xd0>
 80064be:	2a0b      	cmp	r2, #11
 80064c0:	d917      	bls.n	80064f2 <_malloc_r+0xc2>
 80064c2:	1961      	adds	r1, r4, r5
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	6025      	str	r5, [r4, #0]
 80064c8:	bf18      	it	ne
 80064ca:	6059      	strne	r1, [r3, #4]
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	bf08      	it	eq
 80064d0:	f8c8 1000 	streq.w	r1, [r8]
 80064d4:	5162      	str	r2, [r4, r5]
 80064d6:	604b      	str	r3, [r1, #4]
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 fa69 	bl	80069b0 <__malloc_unlock>
 80064de:	f104 000b 	add.w	r0, r4, #11
 80064e2:	1d23      	adds	r3, r4, #4
 80064e4:	f020 0007 	bic.w	r0, r0, #7
 80064e8:	1ac2      	subs	r2, r0, r3
 80064ea:	bf1c      	itt	ne
 80064ec:	1a1b      	subne	r3, r3, r0
 80064ee:	50a3      	strne	r3, [r4, r2]
 80064f0:	e7af      	b.n	8006452 <_malloc_r+0x22>
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	bf0c      	ite	eq
 80064f8:	f8c8 2000 	streq.w	r2, [r8]
 80064fc:	605a      	strne	r2, [r3, #4]
 80064fe:	e7eb      	b.n	80064d8 <_malloc_r+0xa8>
 8006500:	4623      	mov	r3, r4
 8006502:	6864      	ldr	r4, [r4, #4]
 8006504:	e7ae      	b.n	8006464 <_malloc_r+0x34>
 8006506:	463c      	mov	r4, r7
 8006508:	687f      	ldr	r7, [r7, #4]
 800650a:	e7b6      	b.n	800647a <_malloc_r+0x4a>
 800650c:	461a      	mov	r2, r3
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	42a3      	cmp	r3, r4
 8006512:	d1fb      	bne.n	800650c <_malloc_r+0xdc>
 8006514:	2300      	movs	r3, #0
 8006516:	6053      	str	r3, [r2, #4]
 8006518:	e7de      	b.n	80064d8 <_malloc_r+0xa8>
 800651a:	230c      	movs	r3, #12
 800651c:	6033      	str	r3, [r6, #0]
 800651e:	4630      	mov	r0, r6
 8006520:	f000 fa46 	bl	80069b0 <__malloc_unlock>
 8006524:	e794      	b.n	8006450 <_malloc_r+0x20>
 8006526:	6005      	str	r5, [r0, #0]
 8006528:	e7d6      	b.n	80064d8 <_malloc_r+0xa8>
 800652a:	bf00      	nop
 800652c:	20004c6c 	.word	0x20004c6c

08006530 <_printf_common>:
 8006530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	4616      	mov	r6, r2
 8006536:	4698      	mov	r8, r3
 8006538:	688a      	ldr	r2, [r1, #8]
 800653a:	690b      	ldr	r3, [r1, #16]
 800653c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006540:	4293      	cmp	r3, r2
 8006542:	bfb8      	it	lt
 8006544:	4613      	movlt	r3, r2
 8006546:	6033      	str	r3, [r6, #0]
 8006548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800654c:	4607      	mov	r7, r0
 800654e:	460c      	mov	r4, r1
 8006550:	b10a      	cbz	r2, 8006556 <_printf_common+0x26>
 8006552:	3301      	adds	r3, #1
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	0699      	lsls	r1, r3, #26
 800655a:	bf42      	ittt	mi
 800655c:	6833      	ldrmi	r3, [r6, #0]
 800655e:	3302      	addmi	r3, #2
 8006560:	6033      	strmi	r3, [r6, #0]
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	f015 0506 	ands.w	r5, r5, #6
 8006568:	d106      	bne.n	8006578 <_printf_common+0x48>
 800656a:	f104 0a19 	add.w	sl, r4, #25
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	6832      	ldr	r2, [r6, #0]
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	42ab      	cmp	r3, r5
 8006576:	dc26      	bgt.n	80065c6 <_printf_common+0x96>
 8006578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	3b00      	subs	r3, #0
 8006580:	bf18      	it	ne
 8006582:	2301      	movne	r3, #1
 8006584:	0692      	lsls	r2, r2, #26
 8006586:	d42b      	bmi.n	80065e0 <_printf_common+0xb0>
 8006588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800658c:	4641      	mov	r1, r8
 800658e:	4638      	mov	r0, r7
 8006590:	47c8      	blx	r9
 8006592:	3001      	adds	r0, #1
 8006594:	d01e      	beq.n	80065d4 <_printf_common+0xa4>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	6922      	ldr	r2, [r4, #16]
 800659a:	f003 0306 	and.w	r3, r3, #6
 800659e:	2b04      	cmp	r3, #4
 80065a0:	bf02      	ittt	eq
 80065a2:	68e5      	ldreq	r5, [r4, #12]
 80065a4:	6833      	ldreq	r3, [r6, #0]
 80065a6:	1aed      	subeq	r5, r5, r3
 80065a8:	68a3      	ldr	r3, [r4, #8]
 80065aa:	bf0c      	ite	eq
 80065ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b0:	2500      	movne	r5, #0
 80065b2:	4293      	cmp	r3, r2
 80065b4:	bfc4      	itt	gt
 80065b6:	1a9b      	subgt	r3, r3, r2
 80065b8:	18ed      	addgt	r5, r5, r3
 80065ba:	2600      	movs	r6, #0
 80065bc:	341a      	adds	r4, #26
 80065be:	42b5      	cmp	r5, r6
 80065c0:	d11a      	bne.n	80065f8 <_printf_common+0xc8>
 80065c2:	2000      	movs	r0, #0
 80065c4:	e008      	b.n	80065d8 <_printf_common+0xa8>
 80065c6:	2301      	movs	r3, #1
 80065c8:	4652      	mov	r2, sl
 80065ca:	4641      	mov	r1, r8
 80065cc:	4638      	mov	r0, r7
 80065ce:	47c8      	blx	r9
 80065d0:	3001      	adds	r0, #1
 80065d2:	d103      	bne.n	80065dc <_printf_common+0xac>
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065dc:	3501      	adds	r5, #1
 80065de:	e7c6      	b.n	800656e <_printf_common+0x3e>
 80065e0:	18e1      	adds	r1, r4, r3
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	2030      	movs	r0, #48	@ 0x30
 80065e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ea:	4422      	add	r2, r4
 80065ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065f4:	3302      	adds	r3, #2
 80065f6:	e7c7      	b.n	8006588 <_printf_common+0x58>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4622      	mov	r2, r4
 80065fc:	4641      	mov	r1, r8
 80065fe:	4638      	mov	r0, r7
 8006600:	47c8      	blx	r9
 8006602:	3001      	adds	r0, #1
 8006604:	d0e6      	beq.n	80065d4 <_printf_common+0xa4>
 8006606:	3601      	adds	r6, #1
 8006608:	e7d9      	b.n	80065be <_printf_common+0x8e>
	...

0800660c <_printf_i>:
 800660c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006610:	7e0f      	ldrb	r7, [r1, #24]
 8006612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006614:	2f78      	cmp	r7, #120	@ 0x78
 8006616:	4691      	mov	r9, r2
 8006618:	4680      	mov	r8, r0
 800661a:	460c      	mov	r4, r1
 800661c:	469a      	mov	sl, r3
 800661e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006622:	d807      	bhi.n	8006634 <_printf_i+0x28>
 8006624:	2f62      	cmp	r7, #98	@ 0x62
 8006626:	d80a      	bhi.n	800663e <_printf_i+0x32>
 8006628:	2f00      	cmp	r7, #0
 800662a:	f000 80d2 	beq.w	80067d2 <_printf_i+0x1c6>
 800662e:	2f58      	cmp	r7, #88	@ 0x58
 8006630:	f000 80b9 	beq.w	80067a6 <_printf_i+0x19a>
 8006634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800663c:	e03a      	b.n	80066b4 <_printf_i+0xa8>
 800663e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006642:	2b15      	cmp	r3, #21
 8006644:	d8f6      	bhi.n	8006634 <_printf_i+0x28>
 8006646:	a101      	add	r1, pc, #4	@ (adr r1, 800664c <_printf_i+0x40>)
 8006648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800664c:	080066a5 	.word	0x080066a5
 8006650:	080066b9 	.word	0x080066b9
 8006654:	08006635 	.word	0x08006635
 8006658:	08006635 	.word	0x08006635
 800665c:	08006635 	.word	0x08006635
 8006660:	08006635 	.word	0x08006635
 8006664:	080066b9 	.word	0x080066b9
 8006668:	08006635 	.word	0x08006635
 800666c:	08006635 	.word	0x08006635
 8006670:	08006635 	.word	0x08006635
 8006674:	08006635 	.word	0x08006635
 8006678:	080067b9 	.word	0x080067b9
 800667c:	080066e3 	.word	0x080066e3
 8006680:	08006773 	.word	0x08006773
 8006684:	08006635 	.word	0x08006635
 8006688:	08006635 	.word	0x08006635
 800668c:	080067db 	.word	0x080067db
 8006690:	08006635 	.word	0x08006635
 8006694:	080066e3 	.word	0x080066e3
 8006698:	08006635 	.word	0x08006635
 800669c:	08006635 	.word	0x08006635
 80066a0:	0800677b 	.word	0x0800677b
 80066a4:	6833      	ldr	r3, [r6, #0]
 80066a6:	1d1a      	adds	r2, r3, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6032      	str	r2, [r6, #0]
 80066ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066b4:	2301      	movs	r3, #1
 80066b6:	e09d      	b.n	80067f4 <_printf_i+0x1e8>
 80066b8:	6833      	ldr	r3, [r6, #0]
 80066ba:	6820      	ldr	r0, [r4, #0]
 80066bc:	1d19      	adds	r1, r3, #4
 80066be:	6031      	str	r1, [r6, #0]
 80066c0:	0606      	lsls	r6, r0, #24
 80066c2:	d501      	bpl.n	80066c8 <_printf_i+0xbc>
 80066c4:	681d      	ldr	r5, [r3, #0]
 80066c6:	e003      	b.n	80066d0 <_printf_i+0xc4>
 80066c8:	0645      	lsls	r5, r0, #25
 80066ca:	d5fb      	bpl.n	80066c4 <_printf_i+0xb8>
 80066cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066d0:	2d00      	cmp	r5, #0
 80066d2:	da03      	bge.n	80066dc <_printf_i+0xd0>
 80066d4:	232d      	movs	r3, #45	@ 0x2d
 80066d6:	426d      	negs	r5, r5
 80066d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066dc:	4859      	ldr	r0, [pc, #356]	@ (8006844 <_printf_i+0x238>)
 80066de:	230a      	movs	r3, #10
 80066e0:	e011      	b.n	8006706 <_printf_i+0xfa>
 80066e2:	6821      	ldr	r1, [r4, #0]
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	0608      	lsls	r0, r1, #24
 80066e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80066ec:	d402      	bmi.n	80066f4 <_printf_i+0xe8>
 80066ee:	0649      	lsls	r1, r1, #25
 80066f0:	bf48      	it	mi
 80066f2:	b2ad      	uxthmi	r5, r5
 80066f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066f6:	4853      	ldr	r0, [pc, #332]	@ (8006844 <_printf_i+0x238>)
 80066f8:	6033      	str	r3, [r6, #0]
 80066fa:	bf14      	ite	ne
 80066fc:	230a      	movne	r3, #10
 80066fe:	2308      	moveq	r3, #8
 8006700:	2100      	movs	r1, #0
 8006702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006706:	6866      	ldr	r6, [r4, #4]
 8006708:	60a6      	str	r6, [r4, #8]
 800670a:	2e00      	cmp	r6, #0
 800670c:	bfa2      	ittt	ge
 800670e:	6821      	ldrge	r1, [r4, #0]
 8006710:	f021 0104 	bicge.w	r1, r1, #4
 8006714:	6021      	strge	r1, [r4, #0]
 8006716:	b90d      	cbnz	r5, 800671c <_printf_i+0x110>
 8006718:	2e00      	cmp	r6, #0
 800671a:	d04b      	beq.n	80067b4 <_printf_i+0x1a8>
 800671c:	4616      	mov	r6, r2
 800671e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006722:	fb03 5711 	mls	r7, r3, r1, r5
 8006726:	5dc7      	ldrb	r7, [r0, r7]
 8006728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800672c:	462f      	mov	r7, r5
 800672e:	42bb      	cmp	r3, r7
 8006730:	460d      	mov	r5, r1
 8006732:	d9f4      	bls.n	800671e <_printf_i+0x112>
 8006734:	2b08      	cmp	r3, #8
 8006736:	d10b      	bne.n	8006750 <_printf_i+0x144>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	07df      	lsls	r7, r3, #31
 800673c:	d508      	bpl.n	8006750 <_printf_i+0x144>
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	6861      	ldr	r1, [r4, #4]
 8006742:	4299      	cmp	r1, r3
 8006744:	bfde      	ittt	le
 8006746:	2330      	movle	r3, #48	@ 0x30
 8006748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800674c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006750:	1b92      	subs	r2, r2, r6
 8006752:	6122      	str	r2, [r4, #16]
 8006754:	f8cd a000 	str.w	sl, [sp]
 8006758:	464b      	mov	r3, r9
 800675a:	aa03      	add	r2, sp, #12
 800675c:	4621      	mov	r1, r4
 800675e:	4640      	mov	r0, r8
 8006760:	f7ff fee6 	bl	8006530 <_printf_common>
 8006764:	3001      	adds	r0, #1
 8006766:	d14a      	bne.n	80067fe <_printf_i+0x1f2>
 8006768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800676c:	b004      	add	sp, #16
 800676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f043 0320 	orr.w	r3, r3, #32
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	4833      	ldr	r0, [pc, #204]	@ (8006848 <_printf_i+0x23c>)
 800677c:	2778      	movs	r7, #120	@ 0x78
 800677e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	6831      	ldr	r1, [r6, #0]
 8006786:	061f      	lsls	r7, r3, #24
 8006788:	f851 5b04 	ldr.w	r5, [r1], #4
 800678c:	d402      	bmi.n	8006794 <_printf_i+0x188>
 800678e:	065f      	lsls	r7, r3, #25
 8006790:	bf48      	it	mi
 8006792:	b2ad      	uxthmi	r5, r5
 8006794:	6031      	str	r1, [r6, #0]
 8006796:	07d9      	lsls	r1, r3, #31
 8006798:	bf44      	itt	mi
 800679a:	f043 0320 	orrmi.w	r3, r3, #32
 800679e:	6023      	strmi	r3, [r4, #0]
 80067a0:	b11d      	cbz	r5, 80067aa <_printf_i+0x19e>
 80067a2:	2310      	movs	r3, #16
 80067a4:	e7ac      	b.n	8006700 <_printf_i+0xf4>
 80067a6:	4827      	ldr	r0, [pc, #156]	@ (8006844 <_printf_i+0x238>)
 80067a8:	e7e9      	b.n	800677e <_printf_i+0x172>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	f023 0320 	bic.w	r3, r3, #32
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	e7f6      	b.n	80067a2 <_printf_i+0x196>
 80067b4:	4616      	mov	r6, r2
 80067b6:	e7bd      	b.n	8006734 <_printf_i+0x128>
 80067b8:	6833      	ldr	r3, [r6, #0]
 80067ba:	6825      	ldr	r5, [r4, #0]
 80067bc:	6961      	ldr	r1, [r4, #20]
 80067be:	1d18      	adds	r0, r3, #4
 80067c0:	6030      	str	r0, [r6, #0]
 80067c2:	062e      	lsls	r6, r5, #24
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	d501      	bpl.n	80067cc <_printf_i+0x1c0>
 80067c8:	6019      	str	r1, [r3, #0]
 80067ca:	e002      	b.n	80067d2 <_printf_i+0x1c6>
 80067cc:	0668      	lsls	r0, r5, #25
 80067ce:	d5fb      	bpl.n	80067c8 <_printf_i+0x1bc>
 80067d0:	8019      	strh	r1, [r3, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	4616      	mov	r6, r2
 80067d8:	e7bc      	b.n	8006754 <_printf_i+0x148>
 80067da:	6833      	ldr	r3, [r6, #0]
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	6032      	str	r2, [r6, #0]
 80067e0:	681e      	ldr	r6, [r3, #0]
 80067e2:	6862      	ldr	r2, [r4, #4]
 80067e4:	2100      	movs	r1, #0
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7f9 fcf2 	bl	80001d0 <memchr>
 80067ec:	b108      	cbz	r0, 80067f2 <_printf_i+0x1e6>
 80067ee:	1b80      	subs	r0, r0, r6
 80067f0:	6060      	str	r0, [r4, #4]
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	2300      	movs	r3, #0
 80067f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067fc:	e7aa      	b.n	8006754 <_printf_i+0x148>
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	4632      	mov	r2, r6
 8006802:	4649      	mov	r1, r9
 8006804:	4640      	mov	r0, r8
 8006806:	47d0      	blx	sl
 8006808:	3001      	adds	r0, #1
 800680a:	d0ad      	beq.n	8006768 <_printf_i+0x15c>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	079b      	lsls	r3, r3, #30
 8006810:	d413      	bmi.n	800683a <_printf_i+0x22e>
 8006812:	68e0      	ldr	r0, [r4, #12]
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	4298      	cmp	r0, r3
 8006818:	bfb8      	it	lt
 800681a:	4618      	movlt	r0, r3
 800681c:	e7a6      	b.n	800676c <_printf_i+0x160>
 800681e:	2301      	movs	r3, #1
 8006820:	4632      	mov	r2, r6
 8006822:	4649      	mov	r1, r9
 8006824:	4640      	mov	r0, r8
 8006826:	47d0      	blx	sl
 8006828:	3001      	adds	r0, #1
 800682a:	d09d      	beq.n	8006768 <_printf_i+0x15c>
 800682c:	3501      	adds	r5, #1
 800682e:	68e3      	ldr	r3, [r4, #12]
 8006830:	9903      	ldr	r1, [sp, #12]
 8006832:	1a5b      	subs	r3, r3, r1
 8006834:	42ab      	cmp	r3, r5
 8006836:	dcf2      	bgt.n	800681e <_printf_i+0x212>
 8006838:	e7eb      	b.n	8006812 <_printf_i+0x206>
 800683a:	2500      	movs	r5, #0
 800683c:	f104 0619 	add.w	r6, r4, #25
 8006840:	e7f5      	b.n	800682e <_printf_i+0x222>
 8006842:	bf00      	nop
 8006844:	08006fd6 	.word	0x08006fd6
 8006848:	08006fe7 	.word	0x08006fe7

0800684c <__sflush_r>:
 800684c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006854:	0716      	lsls	r6, r2, #28
 8006856:	4605      	mov	r5, r0
 8006858:	460c      	mov	r4, r1
 800685a:	d454      	bmi.n	8006906 <__sflush_r+0xba>
 800685c:	684b      	ldr	r3, [r1, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	dc02      	bgt.n	8006868 <__sflush_r+0x1c>
 8006862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	dd48      	ble.n	80068fa <__sflush_r+0xae>
 8006868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800686a:	2e00      	cmp	r6, #0
 800686c:	d045      	beq.n	80068fa <__sflush_r+0xae>
 800686e:	2300      	movs	r3, #0
 8006870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006874:	682f      	ldr	r7, [r5, #0]
 8006876:	6a21      	ldr	r1, [r4, #32]
 8006878:	602b      	str	r3, [r5, #0]
 800687a:	d030      	beq.n	80068de <__sflush_r+0x92>
 800687c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	0759      	lsls	r1, r3, #29
 8006882:	d505      	bpl.n	8006890 <__sflush_r+0x44>
 8006884:	6863      	ldr	r3, [r4, #4]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800688a:	b10b      	cbz	r3, 8006890 <__sflush_r+0x44>
 800688c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800688e:	1ad2      	subs	r2, r2, r3
 8006890:	2300      	movs	r3, #0
 8006892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006894:	6a21      	ldr	r1, [r4, #32]
 8006896:	4628      	mov	r0, r5
 8006898:	47b0      	blx	r6
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	d106      	bne.n	80068ae <__sflush_r+0x62>
 80068a0:	6829      	ldr	r1, [r5, #0]
 80068a2:	291d      	cmp	r1, #29
 80068a4:	d82b      	bhi.n	80068fe <__sflush_r+0xb2>
 80068a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006950 <__sflush_r+0x104>)
 80068a8:	410a      	asrs	r2, r1
 80068aa:	07d6      	lsls	r6, r2, #31
 80068ac:	d427      	bmi.n	80068fe <__sflush_r+0xb2>
 80068ae:	2200      	movs	r2, #0
 80068b0:	6062      	str	r2, [r4, #4]
 80068b2:	04d9      	lsls	r1, r3, #19
 80068b4:	6922      	ldr	r2, [r4, #16]
 80068b6:	6022      	str	r2, [r4, #0]
 80068b8:	d504      	bpl.n	80068c4 <__sflush_r+0x78>
 80068ba:	1c42      	adds	r2, r0, #1
 80068bc:	d101      	bne.n	80068c2 <__sflush_r+0x76>
 80068be:	682b      	ldr	r3, [r5, #0]
 80068c0:	b903      	cbnz	r3, 80068c4 <__sflush_r+0x78>
 80068c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80068c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068c6:	602f      	str	r7, [r5, #0]
 80068c8:	b1b9      	cbz	r1, 80068fa <__sflush_r+0xae>
 80068ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068ce:	4299      	cmp	r1, r3
 80068d0:	d002      	beq.n	80068d8 <__sflush_r+0x8c>
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7ff fbfe 	bl	80060d4 <_free_r>
 80068d8:	2300      	movs	r3, #0
 80068da:	6363      	str	r3, [r4, #52]	@ 0x34
 80068dc:	e00d      	b.n	80068fa <__sflush_r+0xae>
 80068de:	2301      	movs	r3, #1
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b0      	blx	r6
 80068e4:	4602      	mov	r2, r0
 80068e6:	1c50      	adds	r0, r2, #1
 80068e8:	d1c9      	bne.n	800687e <__sflush_r+0x32>
 80068ea:	682b      	ldr	r3, [r5, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0c6      	beq.n	800687e <__sflush_r+0x32>
 80068f0:	2b1d      	cmp	r3, #29
 80068f2:	d001      	beq.n	80068f8 <__sflush_r+0xac>
 80068f4:	2b16      	cmp	r3, #22
 80068f6:	d11e      	bne.n	8006936 <__sflush_r+0xea>
 80068f8:	602f      	str	r7, [r5, #0]
 80068fa:	2000      	movs	r0, #0
 80068fc:	e022      	b.n	8006944 <__sflush_r+0xf8>
 80068fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006902:	b21b      	sxth	r3, r3
 8006904:	e01b      	b.n	800693e <__sflush_r+0xf2>
 8006906:	690f      	ldr	r7, [r1, #16]
 8006908:	2f00      	cmp	r7, #0
 800690a:	d0f6      	beq.n	80068fa <__sflush_r+0xae>
 800690c:	0793      	lsls	r3, r2, #30
 800690e:	680e      	ldr	r6, [r1, #0]
 8006910:	bf08      	it	eq
 8006912:	694b      	ldreq	r3, [r1, #20]
 8006914:	600f      	str	r7, [r1, #0]
 8006916:	bf18      	it	ne
 8006918:	2300      	movne	r3, #0
 800691a:	eba6 0807 	sub.w	r8, r6, r7
 800691e:	608b      	str	r3, [r1, #8]
 8006920:	f1b8 0f00 	cmp.w	r8, #0
 8006924:	dde9      	ble.n	80068fa <__sflush_r+0xae>
 8006926:	6a21      	ldr	r1, [r4, #32]
 8006928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800692a:	4643      	mov	r3, r8
 800692c:	463a      	mov	r2, r7
 800692e:	4628      	mov	r0, r5
 8006930:	47b0      	blx	r6
 8006932:	2800      	cmp	r0, #0
 8006934:	dc08      	bgt.n	8006948 <__sflush_r+0xfc>
 8006936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800693e:	81a3      	strh	r3, [r4, #12]
 8006940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006948:	4407      	add	r7, r0
 800694a:	eba8 0800 	sub.w	r8, r8, r0
 800694e:	e7e7      	b.n	8006920 <__sflush_r+0xd4>
 8006950:	dfbffffe 	.word	0xdfbffffe

08006954 <_fflush_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	690b      	ldr	r3, [r1, #16]
 8006958:	4605      	mov	r5, r0
 800695a:	460c      	mov	r4, r1
 800695c:	b913      	cbnz	r3, 8006964 <_fflush_r+0x10>
 800695e:	2500      	movs	r5, #0
 8006960:	4628      	mov	r0, r5
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	b118      	cbz	r0, 800696e <_fflush_r+0x1a>
 8006966:	6a03      	ldr	r3, [r0, #32]
 8006968:	b90b      	cbnz	r3, 800696e <_fflush_r+0x1a>
 800696a:	f7ff f9dd 	bl	8005d28 <__sinit>
 800696e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f3      	beq.n	800695e <_fflush_r+0xa>
 8006976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006978:	07d0      	lsls	r0, r2, #31
 800697a:	d404      	bmi.n	8006986 <_fflush_r+0x32>
 800697c:	0599      	lsls	r1, r3, #22
 800697e:	d402      	bmi.n	8006986 <_fflush_r+0x32>
 8006980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006982:	f7ff fb96 	bl	80060b2 <__retarget_lock_acquire_recursive>
 8006986:	4628      	mov	r0, r5
 8006988:	4621      	mov	r1, r4
 800698a:	f7ff ff5f 	bl	800684c <__sflush_r>
 800698e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006990:	07da      	lsls	r2, r3, #31
 8006992:	4605      	mov	r5, r0
 8006994:	d4e4      	bmi.n	8006960 <_fflush_r+0xc>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	059b      	lsls	r3, r3, #22
 800699a:	d4e1      	bmi.n	8006960 <_fflush_r+0xc>
 800699c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800699e:	f7ff fb89 	bl	80060b4 <__retarget_lock_release_recursive>
 80069a2:	e7dd      	b.n	8006960 <_fflush_r+0xc>

080069a4 <__malloc_lock>:
 80069a4:	4801      	ldr	r0, [pc, #4]	@ (80069ac <__malloc_lock+0x8>)
 80069a6:	f7ff bb84 	b.w	80060b2 <__retarget_lock_acquire_recursive>
 80069aa:	bf00      	nop
 80069ac:	20004c64 	.word	0x20004c64

080069b0 <__malloc_unlock>:
 80069b0:	4801      	ldr	r0, [pc, #4]	@ (80069b8 <__malloc_unlock+0x8>)
 80069b2:	f7ff bb7f 	b.w	80060b4 <__retarget_lock_release_recursive>
 80069b6:	bf00      	nop
 80069b8:	20004c64 	.word	0x20004c64

080069bc <__sread>:
 80069bc:	b510      	push	{r4, lr}
 80069be:	460c      	mov	r4, r1
 80069c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c4:	f000 f978 	bl	8006cb8 <_read_r>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	bfab      	itete	ge
 80069cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069ce:	89a3      	ldrhlt	r3, [r4, #12]
 80069d0:	181b      	addge	r3, r3, r0
 80069d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069d6:	bfac      	ite	ge
 80069d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069da:	81a3      	strhlt	r3, [r4, #12]
 80069dc:	bd10      	pop	{r4, pc}

080069de <__swrite>:
 80069de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e2:	461f      	mov	r7, r3
 80069e4:	898b      	ldrh	r3, [r1, #12]
 80069e6:	05db      	lsls	r3, r3, #23
 80069e8:	4605      	mov	r5, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	4616      	mov	r6, r2
 80069ee:	d505      	bpl.n	80069fc <__swrite+0x1e>
 80069f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f4:	2302      	movs	r3, #2
 80069f6:	2200      	movs	r2, #0
 80069f8:	f000 f94c 	bl	8006c94 <_lseek_r>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	4632      	mov	r2, r6
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a12:	f000 b973 	b.w	8006cfc <_write_r>

08006a16 <__sseek>:
 8006a16:	b510      	push	{r4, lr}
 8006a18:	460c      	mov	r4, r1
 8006a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a1e:	f000 f939 	bl	8006c94 <_lseek_r>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	bf15      	itete	ne
 8006a28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a32:	81a3      	strheq	r3, [r4, #12]
 8006a34:	bf18      	it	ne
 8006a36:	81a3      	strhne	r3, [r4, #12]
 8006a38:	bd10      	pop	{r4, pc}

08006a3a <__sclose>:
 8006a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3e:	f000 b8f7 	b.w	8006c30 <_close_r>

08006a42 <__swbuf_r>:
 8006a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a44:	460e      	mov	r6, r1
 8006a46:	4614      	mov	r4, r2
 8006a48:	4605      	mov	r5, r0
 8006a4a:	b118      	cbz	r0, 8006a54 <__swbuf_r+0x12>
 8006a4c:	6a03      	ldr	r3, [r0, #32]
 8006a4e:	b90b      	cbnz	r3, 8006a54 <__swbuf_r+0x12>
 8006a50:	f7ff f96a 	bl	8005d28 <__sinit>
 8006a54:	69a3      	ldr	r3, [r4, #24]
 8006a56:	60a3      	str	r3, [r4, #8]
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	071a      	lsls	r2, r3, #28
 8006a5c:	d501      	bpl.n	8006a62 <__swbuf_r+0x20>
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	b943      	cbnz	r3, 8006a74 <__swbuf_r+0x32>
 8006a62:	4621      	mov	r1, r4
 8006a64:	4628      	mov	r0, r5
 8006a66:	f000 f82b 	bl	8006ac0 <__swsetup_r>
 8006a6a:	b118      	cbz	r0, 8006a74 <__swbuf_r+0x32>
 8006a6c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006a70:	4638      	mov	r0, r7
 8006a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	6922      	ldr	r2, [r4, #16]
 8006a78:	1a98      	subs	r0, r3, r2
 8006a7a:	6963      	ldr	r3, [r4, #20]
 8006a7c:	b2f6      	uxtb	r6, r6
 8006a7e:	4283      	cmp	r3, r0
 8006a80:	4637      	mov	r7, r6
 8006a82:	dc05      	bgt.n	8006a90 <__swbuf_r+0x4e>
 8006a84:	4621      	mov	r1, r4
 8006a86:	4628      	mov	r0, r5
 8006a88:	f7ff ff64 	bl	8006954 <_fflush_r>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d1ed      	bne.n	8006a6c <__swbuf_r+0x2a>
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	60a3      	str	r3, [r4, #8]
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	6022      	str	r2, [r4, #0]
 8006a9c:	701e      	strb	r6, [r3, #0]
 8006a9e:	6962      	ldr	r2, [r4, #20]
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d004      	beq.n	8006ab0 <__swbuf_r+0x6e>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	07db      	lsls	r3, r3, #31
 8006aaa:	d5e1      	bpl.n	8006a70 <__swbuf_r+0x2e>
 8006aac:	2e0a      	cmp	r6, #10
 8006aae:	d1df      	bne.n	8006a70 <__swbuf_r+0x2e>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f7ff ff4e 	bl	8006954 <_fflush_r>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d0d9      	beq.n	8006a70 <__swbuf_r+0x2e>
 8006abc:	e7d6      	b.n	8006a6c <__swbuf_r+0x2a>
	...

08006ac0 <__swsetup_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4b29      	ldr	r3, [pc, #164]	@ (8006b68 <__swsetup_r+0xa8>)
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	460c      	mov	r4, r1
 8006aca:	b118      	cbz	r0, 8006ad4 <__swsetup_r+0x14>
 8006acc:	6a03      	ldr	r3, [r0, #32]
 8006ace:	b90b      	cbnz	r3, 8006ad4 <__swsetup_r+0x14>
 8006ad0:	f7ff f92a 	bl	8005d28 <__sinit>
 8006ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad8:	0719      	lsls	r1, r3, #28
 8006ada:	d422      	bmi.n	8006b22 <__swsetup_r+0x62>
 8006adc:	06da      	lsls	r2, r3, #27
 8006ade:	d407      	bmi.n	8006af0 <__swsetup_r+0x30>
 8006ae0:	2209      	movs	r2, #9
 8006ae2:	602a      	str	r2, [r5, #0]
 8006ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006aee:	e033      	b.n	8006b58 <__swsetup_r+0x98>
 8006af0:	0758      	lsls	r0, r3, #29
 8006af2:	d512      	bpl.n	8006b1a <__swsetup_r+0x5a>
 8006af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006af6:	b141      	cbz	r1, 8006b0a <__swsetup_r+0x4a>
 8006af8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006afc:	4299      	cmp	r1, r3
 8006afe:	d002      	beq.n	8006b06 <__swsetup_r+0x46>
 8006b00:	4628      	mov	r0, r5
 8006b02:	f7ff fae7 	bl	80060d4 <_free_r>
 8006b06:	2300      	movs	r3, #0
 8006b08:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b10:	81a3      	strh	r3, [r4, #12]
 8006b12:	2300      	movs	r3, #0
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f043 0308 	orr.w	r3, r3, #8
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	6923      	ldr	r3, [r4, #16]
 8006b24:	b94b      	cbnz	r3, 8006b3a <__swsetup_r+0x7a>
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b30:	d003      	beq.n	8006b3a <__swsetup_r+0x7a>
 8006b32:	4621      	mov	r1, r4
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 f83f 	bl	8006bb8 <__smakebuf_r>
 8006b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3e:	f013 0201 	ands.w	r2, r3, #1
 8006b42:	d00a      	beq.n	8006b5a <__swsetup_r+0x9a>
 8006b44:	2200      	movs	r2, #0
 8006b46:	60a2      	str	r2, [r4, #8]
 8006b48:	6962      	ldr	r2, [r4, #20]
 8006b4a:	4252      	negs	r2, r2
 8006b4c:	61a2      	str	r2, [r4, #24]
 8006b4e:	6922      	ldr	r2, [r4, #16]
 8006b50:	b942      	cbnz	r2, 8006b64 <__swsetup_r+0xa4>
 8006b52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b56:	d1c5      	bne.n	8006ae4 <__swsetup_r+0x24>
 8006b58:	bd38      	pop	{r3, r4, r5, pc}
 8006b5a:	0799      	lsls	r1, r3, #30
 8006b5c:	bf58      	it	pl
 8006b5e:	6962      	ldrpl	r2, [r4, #20]
 8006b60:	60a2      	str	r2, [r4, #8]
 8006b62:	e7f4      	b.n	8006b4e <__swsetup_r+0x8e>
 8006b64:	2000      	movs	r0, #0
 8006b66:	e7f7      	b.n	8006b58 <__swsetup_r+0x98>
 8006b68:	20000020 	.word	0x20000020

08006b6c <__swhatbuf_r>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	460c      	mov	r4, r1
 8006b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b74:	2900      	cmp	r1, #0
 8006b76:	b096      	sub	sp, #88	@ 0x58
 8006b78:	4615      	mov	r5, r2
 8006b7a:	461e      	mov	r6, r3
 8006b7c:	da0d      	bge.n	8006b9a <__swhatbuf_r+0x2e>
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b84:	f04f 0100 	mov.w	r1, #0
 8006b88:	bf14      	ite	ne
 8006b8a:	2340      	movne	r3, #64	@ 0x40
 8006b8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b90:	2000      	movs	r0, #0
 8006b92:	6031      	str	r1, [r6, #0]
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	b016      	add	sp, #88	@ 0x58
 8006b98:	bd70      	pop	{r4, r5, r6, pc}
 8006b9a:	466a      	mov	r2, sp
 8006b9c:	f000 f858 	bl	8006c50 <_fstat_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	dbec      	blt.n	8006b7e <__swhatbuf_r+0x12>
 8006ba4:	9901      	ldr	r1, [sp, #4]
 8006ba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006baa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bae:	4259      	negs	r1, r3
 8006bb0:	4159      	adcs	r1, r3
 8006bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bb6:	e7eb      	b.n	8006b90 <__swhatbuf_r+0x24>

08006bb8 <__smakebuf_r>:
 8006bb8:	898b      	ldrh	r3, [r1, #12]
 8006bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bbc:	079d      	lsls	r5, r3, #30
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	d507      	bpl.n	8006bd4 <__smakebuf_r+0x1c>
 8006bc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	2301      	movs	r3, #1
 8006bce:	6163      	str	r3, [r4, #20]
 8006bd0:	b003      	add	sp, #12
 8006bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd4:	ab01      	add	r3, sp, #4
 8006bd6:	466a      	mov	r2, sp
 8006bd8:	f7ff ffc8 	bl	8006b6c <__swhatbuf_r>
 8006bdc:	9f00      	ldr	r7, [sp, #0]
 8006bde:	4605      	mov	r5, r0
 8006be0:	4639      	mov	r1, r7
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7ff fc24 	bl	8006430 <_malloc_r>
 8006be8:	b948      	cbnz	r0, 8006bfe <__smakebuf_r+0x46>
 8006bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bee:	059a      	lsls	r2, r3, #22
 8006bf0:	d4ee      	bmi.n	8006bd0 <__smakebuf_r+0x18>
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	f043 0302 	orr.w	r3, r3, #2
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	e7e2      	b.n	8006bc4 <__smakebuf_r+0xc>
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	6020      	str	r0, [r4, #0]
 8006c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c0e:	b15b      	cbz	r3, 8006c28 <__smakebuf_r+0x70>
 8006c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c14:	4630      	mov	r0, r6
 8006c16:	f000 f82d 	bl	8006c74 <_isatty_r>
 8006c1a:	b128      	cbz	r0, 8006c28 <__smakebuf_r+0x70>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	431d      	orrs	r5, r3
 8006c2c:	81a5      	strh	r5, [r4, #12]
 8006c2e:	e7cf      	b.n	8006bd0 <__smakebuf_r+0x18>

08006c30 <_close_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d06      	ldr	r5, [pc, #24]	@ (8006c4c <_close_r+0x1c>)
 8006c34:	2300      	movs	r3, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	4608      	mov	r0, r1
 8006c3a:	602b      	str	r3, [r5, #0]
 8006c3c:	f7fa f8cd 	bl	8000dda <_close>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_close_r+0x1a>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_close_r+0x1a>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	20004c60 	.word	0x20004c60

08006c50 <_fstat_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4d07      	ldr	r5, [pc, #28]	@ (8006c70 <_fstat_r+0x20>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4604      	mov	r4, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	602b      	str	r3, [r5, #0]
 8006c5e:	f7fa f8c8 	bl	8000df2 <_fstat>
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	d102      	bne.n	8006c6c <_fstat_r+0x1c>
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	b103      	cbz	r3, 8006c6c <_fstat_r+0x1c>
 8006c6a:	6023      	str	r3, [r4, #0]
 8006c6c:	bd38      	pop	{r3, r4, r5, pc}
 8006c6e:	bf00      	nop
 8006c70:	20004c60 	.word	0x20004c60

08006c74 <_isatty_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4d06      	ldr	r5, [pc, #24]	@ (8006c90 <_isatty_r+0x1c>)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	602b      	str	r3, [r5, #0]
 8006c80:	f7fa f8c7 	bl	8000e12 <_isatty>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_isatty_r+0x1a>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_isatty_r+0x1a>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	20004c60 	.word	0x20004c60

08006c94 <_lseek_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d07      	ldr	r5, [pc, #28]	@ (8006cb4 <_lseek_r+0x20>)
 8006c98:	4604      	mov	r4, r0
 8006c9a:	4608      	mov	r0, r1
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	602a      	str	r2, [r5, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f7fa f8c0 	bl	8000e28 <_lseek>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_lseek_r+0x1e>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_lseek_r+0x1e>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	20004c60 	.word	0x20004c60

08006cb8 <_read_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	@ (8006cd8 <_read_r+0x20>)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7fa f84e 	bl	8000d68 <_read>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_read_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_read_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20004c60 	.word	0x20004c60

08006cdc <_sbrk_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d06      	ldr	r5, [pc, #24]	@ (8006cf8 <_sbrk_r+0x1c>)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	f7fa f8ac 	bl	8000e44 <_sbrk>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_sbrk_r+0x1a>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_sbrk_r+0x1a>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20004c60 	.word	0x20004c60

08006cfc <_write_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d07      	ldr	r5, [pc, #28]	@ (8006d1c <_write_r+0x20>)
 8006d00:	4604      	mov	r4, r0
 8006d02:	4608      	mov	r0, r1
 8006d04:	4611      	mov	r1, r2
 8006d06:	2200      	movs	r2, #0
 8006d08:	602a      	str	r2, [r5, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f7fa f849 	bl	8000da2 <_write>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d102      	bne.n	8006d1a <_write_r+0x1e>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b103      	cbz	r3, 8006d1a <_write_r+0x1e>
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	20004c60 	.word	0x20004c60

08006d20 <_init>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	bf00      	nop
 8006d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d26:	bc08      	pop	{r3}
 8006d28:	469e      	mov	lr, r3
 8006d2a:	4770      	bx	lr

08006d2c <_fini>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	bf00      	nop
 8006d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d32:	bc08      	pop	{r3}
 8006d34:	469e      	mov	lr, r3
 8006d36:	4770      	bx	lr
